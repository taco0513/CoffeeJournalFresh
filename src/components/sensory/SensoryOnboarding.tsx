import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Modal,
  Animated,
  Dimensions,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { HIGConstants, HIGColors } from '../../styles/common';

const { width, height } = Dimensions.get('window');

interface SensoryOnboardingProps {
  visible: boolean;
  onComplete: () => void;
}

const SensoryOnboarding: React.FC<SensoryOnboardingProps> = ({
  visible,
  onComplete,
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const fadeAnim = useState(new Animated.Value(0))[0];

  const onboardingSteps = [
    {
      title: '‚òï Ïª§Ìîº Í∞êÍ∞ÅÌèâÍ∞Ä',
      subtitle: 'Îçî ÏπúÏàôÌïú ÌëúÌòÑÏúºÎ°ú Ïª§ÌîºÎ•º ÌèâÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî',
      description: 'Ï†ÑÎ¨∏Í∞ÄÎì§Ïù¥ ÏÇ¨Ïö©ÌïòÎäî ÌïúÍµ≠Ïñ¥ Í∞êÍ∞ÅÌèâÍ∞Ä ÌëúÌòÑÏùÑ ÏâΩÍ≤å ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù Ï§ÄÎπÑÌñàÏñ¥Ïöî.',
      highlight: '',
    },
    {
      title: 'üí° Îã§Ï§ë ÏÑ†ÌÉùÏù¥ Í∞ÄÎä•Ìï¥Ïöî',
      subtitle: 'Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú Ïó¨Îü¨ ÌëúÌòÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî',
      description: 'Ïã§Ï†ú Ïª§ÌîºÏóêÏÑúÎäî Ïó¨Îü¨ Ï¢ÖÎ•òÏùò ÏÇ∞ÎØ∏ÎÇò Îã®ÎßõÏùÑ ÎèôÏãúÏóê ÎäêÎÇÑ Ïàò ÏûàÏñ¥Ïöî. ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏùºÏù¥ÎãàÍπå Î∂ÄÎã¥ÏóÜÏù¥ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!',
      highlight: 'Ïòà: Ïã±Í∑∏Îü¨Ïö¥ + Î∞úÎûÑÌïú ÏÇ∞ÎØ∏',
    },
    {
      title: 'üéØ Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏµúÎåÄ 3Í∞úÍπåÏßÄ',
      subtitle: 'Í∞Å ÏòÅÏó≠ÏóêÏÑú ÎäêÍª¥ÏßÄÎäî ÌäπÏßïÏùÑ Í≥®ÎùºÏ£ºÏÑ∏Ïöî',
      description: 'ÏÇ∞ÎØ∏, Îã®Îßõ, Ïì¥Îßõ, Î∞îÎîî, Ïï†ÌîÑÌÑ∞, Î∞∏Îü∞Ïä§ Í∞Å Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú ÏµúÎåÄ 3Í∞úÍπåÏßÄ ÏÑ†ÌÉùÌï† Ïàò ÏûàÏñ¥Ïöî.',
      highlight: '',
    },
    {
      title: '‚òï Ï†ïÎãµÏùÄ ÏóÜÏñ¥Ïöî',
      subtitle: 'ÎãπÏã†Ïù¥ ÎäêÎÅºÎäî Í∑∏ÎåÄÎ°úÍ∞Ä Ï†ïÎãµÏûÖÎãàÎã§',
      description: 'Ïª§Ìîº Í∞êÍ∞ÅÌèâÍ∞ÄÏóêÎäî Ï†ïÎãµÏù¥ ÏóÜÏñ¥Ïöî. Ìé∏ÏïàÌïòÍ≤å ÏûêÏã†Ïùò Í∞êÍ∞ÅÏùÑ ÎØøÍ≥† ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî.',
      highlight: 'ÏãúÏûëÌï¥Î≥ºÍπåÏöî?',
    },
  ];

  React.useEffect(() => {
    if (visible) {
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }).start();
    }
  }, [visible, fadeAnim]);

  const handleNext = async () => {
    if (currentStep < onboardingSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      await markOnboardingCompleted();
      onComplete();
    }
  };

  const handleSkip = async () => {
    await markOnboardingCompleted();
    onComplete();
  };

  const currentStepData = onboardingSteps[currentStep];

  return (
    <Modal
      visible={visible}
      transparent
      animationType="fade"
      statusBarTranslucent
    >
      <View style={styles.overlay}>
        <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
          <View style={styles.content}>
            <Text style={styles.title}>{currentStepData.title}</Text>
            <Text style={styles.subtitle}>{currentStepData.subtitle}</Text>
            <Text style={styles.description}>{currentStepData.description}</Text>
            
            {currentStepData.highlight && (
              <View style={styles.highlightContainer}>
                <Text style={styles.highlight}>{currentStepData.highlight}</Text>
              </View>
            )}

            <View style={styles.progressContainer}>
              {onboardingSteps.map((_, index) => (
                <View
                  key={index}
                  style={[
                    styles.progressDot,
                    index === currentStep && styles.progressDotActive,
                  ]}
                />
              ))}
            </View>
          </View>

          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.skipButton} onPress={handleSkip}>
              <Text style={styles.skipButtonText}>Í±¥ÎÑàÎõ∞Í∏∞</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.nextButton} onPress={handleNext}>
              <Text style={styles.nextButtonText}>
                {currentStep === onboardingSteps.length - 1 ? 'ÏãúÏûëÌïòÍ∏∞' : 'Îã§Ïùå'}
              </Text>
            </TouchableOpacity>
          </View>
        </Animated.View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_LG,
  },
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: HIGConstants.BORDER_RADIUS * 2,
    width: Math.min(width - 32, 400),
    maxHeight: height - 100,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 8,
  },
  content: {
    padding: HIGConstants.SPACING_XL,
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: HIGColors.label,
    textAlign: 'center',
    marginBottom: HIGConstants.SPACING_SM,
  },
  subtitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.systemBlue,
    textAlign: 'center',
    marginBottom: HIGConstants.SPACING_MD,
  },
  description: {
    fontSize: 15,
    color: HIGColors.secondaryLabel,
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: HIGConstants.SPACING_LG,
  },
  highlightContainer: {
    backgroundColor: HIGColors.systemBlue + '15',
    paddingHorizontal: HIGConstants.SPACING_MD,
    paddingVertical: HIGConstants.SPACING_SM,
    borderRadius: HIGConstants.cornerRadiusMedium,
    marginBottom: HIGConstants.SPACING_LG,
  },
  highlight: {
    fontSize: 14,
    fontWeight: '600',
    color: HIGColors.systemBlue,
    textAlign: 'center',
  },
  progressContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: HIGConstants.SPACING_LG,
  },
  progressDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: HIGColors.systemGray4,
    marginHorizontal: 4,
  },
  progressDotActive: {
    backgroundColor: HIGColors.systemBlue,
    width: 12,
    height: 8,
    borderRadius: 4,
  },
  buttonContainer: {
    flexDirection: 'row',
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingBottom: HIGConstants.SPACING_LG,
    paddingTop: HIGConstants.SPACING_MD,
    borderTopWidth: 1,
    borderTopColor: HIGColors.systemGray5,
  },
  skipButton: {
    flex: 1,
    paddingVertical: HIGConstants.SPACING_MD,
    alignItems: 'center',
    marginRight: HIGConstants.SPACING_SM,
  },
  skipButtonText: {
    fontSize: 16,
    color: HIGColors.systemGray1,
    fontWeight: '500',
  },
  nextButton: {
    flex: 1,
    backgroundColor: HIGColors.systemBlue,
    paddingVertical: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.cornerRadiusMedium,
    alignItems: 'center',
    marginLeft: HIGConstants.SPACING_SM,
  },
  nextButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
});

// Helper function to check if onboarding should be shown
export const checkShouldShowOnboarding = async (): Promise<boolean> => {
  try {
    const hasSeenOnboarding = await AsyncStorage.getItem('hasSeenKoreanSensoryOnboarding');
    return hasSeenOnboarding !== 'true';
  } catch (error) {
    console.error('Error checking onboarding status:', error);
    return true;
  }
};

// Helper function to mark onboarding as completed
export const markOnboardingCompleted = async (): Promise<void> => {
  try {
    await AsyncStorage.setItem('hasSeenKoreanSensoryOnboarding', 'true');
  } catch (error) {
    console.error('Error marking onboarding as completed:', error);
  }
};

export default SensoryOnboarding;