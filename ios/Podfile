# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '15.1'
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'CoffeeJournalFresh' do
  config = use_native_modules!
  

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :fabric_enabled => false
  )
  

  pre_install do |installer|
    # Fix for VisionCamera on M1 Macs
    installer.pod_targets.each do |pod|
      if pod.name.include?('VisionCamera')
        def pod.build_type
          Pod::BuildType.static_library
        end
      end
    end
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    
    # Apply fix immediately after react_native_post_install
    system("ruby fix_rct_provider.rb")
    
    # Remove New Architecture flags to prevent crashes
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Remove RCT_NEW_ARCH_ENABLED flag
        config.build_settings['OTHER_CFLAGS'] = config.build_settings['OTHER_CFLAGS']&.gsub('-DRCT_NEW_ARCH_ENABLED=1', '') || ''
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = config.build_settings['OTHER_CPLUSPLUSFLAGS']&.gsub('-DRCT_NEW_ARCH_ENABLED=1', '') || ''
        config.build_settings['OTHER_SWIFT_FLAGS'] = config.build_settings['OTHER_SWIFT_FLAGS']&.gsub('-DRCT_NEW_ARCH_ENABLED=1', '') || ''
        
        # Also check GCC_PREPROCESSOR_DEFINITIONS
        if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].reject { |flag| flag.include?('RCT_NEW_ARCH_ENABLED=1') }
        end
      end
    end
    
    # Disable sandboxing for Pod scripts to fix Xcode 16 issues
    installer.generated_projects.each do |project|
      project.targets.each do |target|
        target.build_configurations.each do |config|
          config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        end
      end
    end
    
    # Fix RCTThirdPartyComponentsProvider.mm to prevent crashes from nil NSClassFromString
    fix_script_path = File.join(__dir__, 'fix_rct_provider.rb')
    if File.exist?(fix_script_path)
      puts "Running fix_rct_provider.rb..."
      system("ruby #{fix_script_path}")
    end
    
    # Add the fix script as a build phase for the main app target
    installer.pods_project.targets.each do |target|
      if target.name == 'ReactCodegen'
        phase_name = 'Fix RCTThirdPartyComponentsProvider After Generation'
        unless target.shell_script_build_phases.any? { |phase| phase.name == phase_name }
          phase = target.new_shell_script_build_phase(phase_name)
          phase.shell_script = "cd \"$PODS_ROOT/../\" && ruby fix_rct_provider.rb"
        end
      end
    end
    
    # Also add the fix as an Xcode build phase
    installer.pods_project.targets.each do |target|
      if target.name == 'React-Codegen'
        phase_name = 'Fix RCTThirdPartyComponentsProvider'
        unless target.build_phases.any? { |phase| phase.name == phase_name }
          phase = target.new_shell_script_build_phase(phase_name)
          phase.shell_script = "cd \"$PODS_ROOT/../\" && ruby fix_rct_provider.rb"
        end
      end
    end
    
    # Fix for M1 Macs - ensure we don't exclude arm64 architecture
    installer.pods_project.build_configurations.each do |config|
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = ""
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
    end
    
    # Ensure CocoaPods config files don't exclude arm64
    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.xcconfigs.each do |config_name, config_file|
        config_file.save_as(aggregate_target.xcconfig_path(config_name))
      end
    end
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = ""
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
        
        # Fix for VisionCamera
        if target.name == 'VisionCamera'
          config.build_settings['DEFINES_MODULE'] = 'YES'
          config.build_settings['SWIFT_VERSION'] = '5.0'
        end
        
        # Fix for MLKit frameworks - ensure they work with simulator
        if target.name.start_with?('MLKit') || target.name.start_with?('GoogleMLKit')
          config.build_settings['VALID_ARCHS'] = 'arm64'
          config.build_settings['ARCHS'] = 'arm64'
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = ''
        end
      end
    end
  end
end
