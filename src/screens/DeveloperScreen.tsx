import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Switch,
  Alert,
  DeviceEventEmitter,
} from 'react-native';
import { useNavigation, CommonActions } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../types/navigation';
import { HIGConstants, HIGColors } from '../styles/common';
import { useDevStore } from '../stores/useDevStore';
import { useUserStore } from '../stores/useUserStore';
import { useFeedbackStore } from '../stores/useFeedbackStore';
import RealmService from '../services/realm/RealmService';
import { TastingData } from '../services/realm/types';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Category Icons - Removed for MVP Beta clean design
const CategoryIcons = {
  user: '',
  debug: '',
  test: '',
  feature: '',
  beta: '',
  login: '',
  data: '',
};

type NavigationProp = StackNavigationProp<RootStackParamList>;

const DeveloperScreen = () => {
  const navigation = useNavigation<NavigationProp>();
  
  const { currentUser, setTestUser } = useUserStore();
  const { showFeedback, enableShakeToFeedback, toggleShakeToFeedback, isBetaUser, setBetaStatus } = useFeedbackStore();
  const {
    isDeveloperMode,
    showDebugInfo,
    skipAnimations,
    bypassLogin,
    toggleDeveloperMode,
    setDebugInfo,
    setSkipAnimations,
    setBypassLogin,
    resetAllSettings,
  } = useDevStore();

  // Developer mode controls access to all developer features

  // Track current data count
  const [mockDataCount, setMockDataCount] = React.useState(0);
  // Simple function to load current data count
  const loadDataCount = async () => {
    try {
      const realmService = RealmService.getInstance();
      if (!realmService.isInitialized) {
        await realmService.initialize();
      }
      const tastings = await realmService.getTastingRecords({ isDeleted: false });
      const count = Array.from(tastings).length;
      setMockDataCount(count);
      return count;
    } catch (error) {
      console.error('Error loading data count:', error);
      return 0;
    }
  };

  // Load initial data count on mount
  React.useEffect(() => {
    loadDataCount();
  }, []);

  // Refresh data count when screen focuses
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      loadDataCount();
    });
    
    return unsubscribe;
  }, [navigation]);

  const handleClearStorage = () => {
    Alert.alert(
      'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú',
      'Î™®Îì† Ïï± Îç∞Ïù¥ÌÑ∞(ÏÑ§Ï†ï, Ï∫êÏãú Îì±)Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏï±Ïù¥ Ïû¨ÏãúÏûëÎê©ÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.clear();
              Alert.alert('ÏôÑÎ£å', 'Ï†ÄÏû•ÏÜåÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§. Ïï±ÏùÑ Ïû¨ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.');
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleClearRealmData = () => {
    Alert.alert(
      'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
      'Î™®Îì† ÌÖåÏù¥Ïä§ÌåÖ Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              
              // Ensure realm is initialized
              if (!realmService.isInitialized) {
                try {
                  console.log('üîÑ Initializing Realm for clear operation...');
                  await realmService.initialize();
                  console.log('‚úÖ Realm initialized for clear operation');
                } catch (initError: any) {
                  if (initError.message?.includes('already opened')) {
                    console.log('‚úÖ Realm already opened for clear operation');
                  } else {
                    console.error('‚ùå Realm initialization failed for clear:', initError);
                    Alert.alert('Ïò§Î•ò', 'Realm Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    return;
                  }
                }
              }
              
              if (realmService.isInitialized) {
                try {
                  const realm = realmService.getRealm();
                  
                  // Ìä∏ÎûúÏû≠ÏÖò ÎÇ¥ÏóêÏÑú ÏïàÏ†ÑÌïòÍ≤å ÏÇ≠Ï†ú
                  realm.write(() => {
                    // TastingRecordÎßå ÏÇ≠Ï†ú (Îã§Î•∏ Ïä§ÌÇ§ÎßàÏóê ÏòÅÌñ• ÏóÜÎèÑÎ°ù)
                    const tastings = realm.objects('TastingRecord');
                    realm.delete(tastings);
                  });
                  
                  // Update count
                  await loadDataCount();
                  
                  console.log('‚úÖ Mock data reset completed successfully');
                  Alert.alert('ÏôÑÎ£å', 'Mock Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                } catch (deleteError) {
                  console.error('‚ùå Error during realm delete transaction:', deleteError);
                  Alert.alert('Ïò§Î•ò', 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                }
              } else {
                Alert.alert('Ïò§Î•ò', 'RealmÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
              }
            } catch (error) {
              console.error('Clear Realm data error:', error);
              Alert.alert('Ïò§Î•ò', 'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };



  const handleMockDataToggle = async (enable: boolean) => {
    if (!isDeveloperMode) {
      return;
    }
    
    try {
      const realmService = RealmService.getInstance();
      if (!realmService.isInitialized) {
        await realmService.initialize();
      }
      
      if (enable) {
        // Create mock data

        const mockData = [
          {
            cafeName: 'Blue Bottle Oakland',
            roastery: 'Blue Bottle',
            coffeeName: 'Three Africas',
            origin: 'Ethiopia',
            variety: 'Heirloom',
            altitude: '2000m',
            process: 'Natural',
            temperature: 'hot' as const,
            roasterNotes: 'Bright and fruity with floral notes',
            matchScoreTotal: 85,
            matchScoreFlavor: 42,
            matchScoreSensory: 43,
            flavorNotes: [
              { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
              { level: 2, value: 'Berry', koreanValue: 'Î≤†Î¶¨Î•ò' },
              { level: 3, value: 'Blueberry', koreanValue: 'Î∏îÎ£®Î≤†Î¶¨' }
            ],
            sensoryAttribute: {
              body: 3,
              acidity: 4,
              sweetness: 3,
              finish: 4,
              mouthfeel: 'Clean'
            },
            isSynced: false,
            isDeleted: false
          },
          {
            cafeName: 'Fritz Coffee Company',
            roastery: 'Fritz',
            coffeeName: 'Colombia Geisha',
            origin: 'Colombia',
            variety: 'Geisha',
            altitude: '1850m',
            process: 'Washed',
            temperature: 'hot' as const,
            roasterNotes: 'Floral and tea-like with jasmine notes',
            matchScoreTotal: 92,
            matchScoreFlavor: 46,
            matchScoreSensory: 46,
            flavorNotes: [
              { level: 1, value: 'Floral', koreanValue: 'ÍΩÉÌñ•' },
              { level: 2, value: 'White Floral', koreanValue: 'Ìù∞ ÍΩÉ' },
              { level: 3, value: 'Jasmine', koreanValue: 'ÏûêÏä§ÎØº' }
            ],
            sensoryAttribute: {
              body: 4,
              acidity: 5,
              sweetness: 4,
              finish: 5,
              mouthfeel: 'Juicy'
            },
            isSynced: false,
            isDeleted: false
          },
          {
            cafeName: 'Anthracite Coffee',
            roastery: 'Anthracite',
            coffeeName: 'Brazil Santos',
            origin: 'Brazil',
            variety: 'Bourbon',
            altitude: '1200m',
            process: 'Pulped Natural',
            temperature: 'cold' as const,
            roasterNotes: 'Chocolatey and nutty with smooth body',
            matchScoreTotal: 80,
            matchScoreFlavor: 40,
            matchScoreSensory: 40,
            flavorNotes: [
              { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
              { level: 2, value: 'Dark Chocolate', koreanValue: 'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø' },
              { level: 3, value: 'Bittersweet Chocolate', koreanValue: 'ÏåâÏåÄÌïú Ï¥àÏΩúÎ¶ø' }
            ],
            sensoryAttribute: {
              body: 5,
              acidity: 2,
              sweetness: 4,
              finish: 3,
              mouthfeel: 'Creamy'
            },
            isSynced: false,
            isDeleted: false
          },
          {
            cafeName: 'Terarosa Coffee',
            roastery: 'Terarosa',
            coffeeName: 'Guatemala Huehuetenango',
            origin: 'Guatemala',
            variety: 'Caturra',
            altitude: '1900m',
            process: 'Washed',
            temperature: 'hot' as const,
            roasterNotes: 'Balanced with chocolate and citrus notes',
            matchScoreTotal: 86,
            matchScoreFlavor: 43,
            matchScoreSensory: 43,
            flavorNotes: [
              { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
              { level: 2, value: 'Citrus', koreanValue: 'ÏãúÌä∏Îü¨Ïä§' },
              { level: 3, value: 'Orange', koreanValue: 'Ïò§Î†åÏßÄ' }
            ],
            sensoryAttribute: {
              body: 4,
              acidity: 3,
              sweetness: 4,
              finish: 4,
              mouthfeel: 'Silky'
            },
            isSynced: false,
            isDeleted: false
          },
          {
            cafeName: 'The Coffee Bean & Tea Leaf',
            roastery: 'Coffee Bean',
            coffeeName: 'House Blend',
            origin: 'Central America',
            variety: 'Arabica Blend',
            altitude: '1400m',
            process: 'Mixed',
            temperature: 'hot' as const,
            roasterNotes: 'Classic coffee with nutty undertones',
            matchScoreTotal: 75,
            matchScoreFlavor: 37,
            matchScoreSensory: 38,
            flavorNotes: [
              { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò' },
              { level: 2, value: 'Nutty', koreanValue: 'Í≤¨Í≥º' },
              { level: 3, value: 'Hazelnut', koreanValue: 'Ìó§Ïù¥Ï¶êÎÑõ' }
            ],
            sensoryAttribute: {
              body: 3,
              acidity: 2,
              sweetness: 3,
              finish: 3,
              mouthfeel: 'Smooth'
            },
            isSynced: false,
            isDeleted: false
          }
        ];

        // Save all mock data
        console.log('üéØ Starting mock data creation...');
        let successCount = 0;
        
        for (const [index, data] of mockData.entries()) {
          try {
            console.log(`üîÑ Creating tasting ${index + 1}/${mockData.length}: ${data.coffeeName}`);
            
            const tastingData: TastingData = {
              coffeeInfo: {
                cafeName: data.cafeName,
                roastery: data.roastery,
                coffeeName: data.coffeeName,
                origin: data.origin,
                variety: data.variety,
                altitude: data.altitude,
                process: data.process,
                temperature: data.temperature,
              },
              roasterNotes: data.roasterNotes,
              selectedFlavors: data.flavorNotes,
              sensoryAttributes: data.sensoryAttribute,
              matchScore: {
                total: data.matchScoreTotal,
                flavorScore: data.matchScoreFlavor,
                sensoryScore: data.matchScoreSensory,
              }
            };
            
            console.log('üìã Tasting data structure:', JSON.stringify(tastingData, null, 2));
            
            const result = await realmService.saveTasting(tastingData);
            
            if (result && result.id) {
              successCount++;
              console.log(`‚úÖ Successfully created: ${data.coffeeName} (ID: ${result.id})`);
            } else {
              console.log(`‚ö†Ô∏è No result returned for: ${data.coffeeName}`);
            }
          } catch (error) {
            console.error(`‚ùå Failed to create ${data.coffeeName}:`, error);
          }
        }
        
        console.log(`üìä Mock data creation completed: ${successCount}/${mockData.length} successful`);
        
        // Verify data was created
        const verifyTastings = await realmService.getTastingRecords({ isDeleted: false });
        console.log(`üîç Verification: ${Array.from(verifyTastings).length} total records after creation`);
        
        // Update UI
        await loadDataCount();
        
        // Emit refresh event for all screens listening
        DeviceEventEmitter.emit('mockDataCreated');
        
        Alert.alert(
          'ÏôÑÎ£å', 
          '5Í∞úÏùò ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§. JournalÎ°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
          [
            {
              text: 'ÎÇòÏ§ëÏóê',
              style: 'cancel'
            },
            {
              text: 'JournalÎ°ú Ïù¥Îèô',
              onPress: () => {
                // Force navigation to Journal tab and refresh
                navigation.dispatch(
                  CommonActions.navigate({
                    name: 'MainTabs',
                    params: {
                      screen: 'Journal',
                      params: {
                        screen: 'HistoryMain'
                      }
                    }
                  })
                );
              }
            }
          ]
        );
        
      } else {
        // Delete all data
        const realm = realmService.getRealm();
        realm.write(() => {
          const tastings = realm.objects('TastingRecord');
          realm.delete(tastings);
        });
        
        // Update UI
        await loadDataCount();
        Alert.alert('ÏôÑÎ£å', 'Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Mock data toggle error:', error);
      Alert.alert('Ïò§Î•ò', 'ÏûëÏóÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      // Reset display to match actual state
      await loadDataCount();
    }
  };


  const SettingRow = ({ 
    title, 
    description, 
    value, 
    onValueChange, 
    icon,
    isLast = false,
  }: {
    title: string;
    description?: string;
    value?: boolean;
    onValueChange?: (value: boolean) => void;
    icon?: string;
    isLast?: boolean;
  }) => (
    <View style={[styles.settingRow, isLast && styles.settingRowLast]}>
      {icon && (
        <Text style={styles.settingIcon}>{icon}</Text>
      )}
      <View style={styles.settingInfo}>
        <Text style={styles.settingTitle}>{title}</Text>
        {description && (
          <Text style={styles.settingDescription}>{description}</Text>
        )}
      </View>
      <Switch
        value={value}
        onValueChange={onValueChange}
        trackColor={{ false: HIGColors.gray3, true: HIGColors.blue }}
        thumbColor={value ? HIGColors.white : HIGColors.gray}
      />
    </View>
  );

  const ActionButton = ({ title, onPress, style, textStyle, icon }: {
    title: string;
    onPress: () => void;
    style?: any;
    textStyle?: any;
    icon?: string;
  }) => (
    <TouchableOpacity 
      style={[styles.actionButton, style]} 
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.actionButtonContent}>
        {icon && <Text style={styles.actionButtonIcon}>{icon}</Text>}
        <Text style={[styles.actionButtonText, textStyle]}>{title}</Text>
      </View>
    </TouchableOpacity>
  );

  // Section Header Component
  const SectionHeader = ({ 
    title, 
    icon, 
    count,
  }: {
    title: string;
    icon: string;
    count?: number;
  }) => (
    <View style={styles.sectionHeader}>
      <View style={styles.sectionHeaderLeft}>
        <Text style={styles.sectionIcon}>{icon}</Text>
        <Text style={styles.sectionTitle}>{title}</Text>
        {count !== undefined && count > 0 && (
          <View style={styles.badge}>
            <Text style={styles.badgeText}>{count}</Text>
          </View>
        )}
      </View>
    </View>
  );

  if (!isDeveloperMode) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.navigationBar}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
          </TouchableOpacity>
          <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
          <View style={{ width: 30 }} />
        </View>

        <View style={styles.disabledContainer}>
          <Text style={styles.disabledIcon}>üö´</Text>
          <Text style={styles.disabledTitle}>Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎê®</Text>
          <Text style={styles.disabledDescription}>
            Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÌôúÏÑ±ÌôîÌïòÎ†§Î©¥ ÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.{'\n'}
            Ïù¥ Î™®ÎìúÎäî ÎîîÎ≤ÑÍπÖÍ≥º ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Í≥†Í∏â ÏÑ§Ï†ïÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
          </Text>
          <TouchableOpacity
            style={styles.enableButton}
            onPress={toggleDeveloperMode}
          >
            <Text style={styles.enableButtonText}>Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.navigationBar}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
        </TouchableOpacity>
        <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
        <View style={{ width: 60 }} />
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Warning */}
        <View style={styles.warningCard}>
          <Text style={styles.warningIcon}>‚ö†Ô∏è</Text>
          <Text style={styles.warningText}>
            Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.{'\n'}
            Ïù¥ ÏÑ§Ï†ïÎì§ÏùÄ Ïï±Ïùò ÎèôÏûëÏóê ÏòÅÌñ•ÏùÑ Ï§Ñ Ïàò ÏûàÏäµÎãàÎã§.
          </Text>
        </View>

        {/* User Info */}
        <View style={styles.section}>
          <SectionHeader
            title="ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥"
            icon={CategoryIcons.user}
          />
          <View style={styles.card}>
            <View style={styles.userInfoCard}>
              <View style={styles.userAvatar}>
                <Text style={styles.userAvatarText}>
                  {currentUser?.username?.charAt(0).toUpperCase() || 'G'}
                </Text>
              </View>
              <View style={styles.userDetails}>
                <Text style={styles.userName}>
                  {currentUser?.username || 'User'}
                </Text>
                <Text style={styles.userEmail}>
                  {currentUser?.email || 'user@coffejournal.app'}
                </Text>
                <View style={styles.userBadges}>
                  <View style={[styles.userBadge, { backgroundColor: currentUser ? '#4CAF50' : '#FFC107' }]}>
                    <Text style={styles.userBadgeText}>
                      {currentUser ? 'Î°úÍ∑∏Ïù∏' : 'ÎØ∏Î°úÍ∑∏Ïù∏'}
                    </Text>
                  </View>
                  {currentUser?.email === 'hello@zimojin.com' && (
                    <View style={[styles.userBadge, { backgroundColor: '#6B46C1' }]}>
                      <Text style={styles.userBadgeText}>Í¥ÄÎ¶¨Ïûê</Text>
                    </View>
                  )}
                </View>
              </View>
            </View>
          </View>
        </View>

        {/* Debug Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÎîîÎ≤ÑÍ∑∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.debug}
count={[showDebugInfo].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              title="ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú"
              description="ÌôîÎ©¥Ïóê ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú"
              value={showDebugInfo}
              onValueChange={setDebugInfo}
              isLast={true}
            />
          </View>
        </View>

        {/* Test Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.test}
            count={[
              skipAnimations, 
              bypassLogin
            ].filter(Boolean).length}
          />
          <View style={styles.card}>
            {/* Mock data toggle - only in developer mode */}
            {isDeveloperMode ? (
              <SettingRow
                title="Mock Îç∞Ïù¥ÌÑ∞"
                description={`ÌòÑÏû¨ ${mockDataCount}Í∞úÏùò ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞`}
                value={mockDataCount > 0}
                onValueChange={handleMockDataToggle}
              />
            ) : (
              <View style={styles.restrictedFeature}>
                <Text style={styles.restrictedTitle}>Mock Îç∞Ïù¥ÌÑ∞</Text>
                <Text style={styles.restrictedDescription}>
                  Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÌôúÏÑ±ÌôîÌïòÏÑ∏Ïöî
                </Text>
              </View>
            )}
            <SettingRow
              title="Ïï†ÎãàÎ©îÏù¥ÏÖò Í±¥ÎÑàÎõ∞Í∏∞"
              description="Î™®Îì† Ïï†ÎãàÎ©îÏù¥ÏÖò ÎπÑÌôúÏÑ±Ìôî"
              value={skipAnimations}
              onValueChange={setSkipAnimations}
            />
            <SettingRow
              title="Î°úÍ∑∏Ïù∏ Î∞îÏù¥Ìå®Ïä§"
              description="Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏùÑ Í±¥ÎÑàÎõ∞Í≥† Î∞îÎ°ú Ïï± ÏßÑÏûÖ"
              value={bypassLogin}
              onValueChange={setBypassLogin}
              isLast={true}
            />
          </View>
        </View>

        {/* Feature Flags */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∏∞Îä• ÌîåÎûòÍ∑∏"
            icon={CategoryIcons.feature}
count={0}
          />
          <View style={styles.card}>
          </View>
        </View>

        {/* Beta Feedback Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="Î≤†ÌÉÄ ÌîºÎìúÎ∞±"
            icon={CategoryIcons.beta}
            count={[enableShakeToFeedback, isBetaUser].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              title="ÌùîÎì§Ïñ¥ÏÑú ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞"
              description="Í∏∞Í∏∞Î•º ÌùîÎì§Ïñ¥ ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              value={enableShakeToFeedback}
              onValueChange={toggleShakeToFeedback}
            />
            <SettingRow
              title="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Î™®Îìú"
              description="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Ï†ÑÏö© Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={isBetaUser}
              onValueChange={setBetaStatus}
              isLast={true}
            />
            <ActionButton
              title="ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              onPress={showFeedback}
            />
          </View>
        </View>

        {/* Quick Login */}
        <View style={styles.section}>
          <SectionHeader
            title="Îπ†Î•∏ Î°úÍ∑∏Ïù∏"
            icon={CategoryIcons.login}
          />
          <View style={styles.card}>
            <ActionButton
              title="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏"
              onPress={() => {
                setTestUser();
                Alert.alert('ÏôÑÎ£å', 'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏ÌñàÏäµÎãàÎã§.');
              }}
              style={styles.successButton}
              textStyle={styles.successButtonText}
            />
          </View>
        </View>

        {/* Actions */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∞úÎ∞úÏûê Ïï°ÏÖò"
            icon={CategoryIcons.data}
          />
          <View style={styles.card}>
            <View style={styles.actionGroup}>
              <Text style={styles.actionGroupTitle}>Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</Text>
              <ActionButton
                title="Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ ÌôîÎ©¥"
                onPress={() => navigation.navigate('DataTest')}
                style={styles.actionButton}
              />
              <ActionButton
                title="Mock Îç∞Ïù¥ÌÑ∞ Î¶¨ÏÖã"
                onPress={handleClearRealmData}
                style={styles.warningButton}
                textStyle={styles.warningButtonText}
                icon="üîÑ"
              />
            </View>
            
            
            <View style={[styles.actionGroup, styles.dangerZone]}>
              <Text style={[styles.actionGroupTitle, styles.dangerTitle]}>ÏúÑÌóò Íµ¨Ïó≠</Text>
              <ActionButton
                title="Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú"
                onPress={handleClearRealmData}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                title="Ï†ÑÏ≤¥ Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú"
                onPress={handleClearStorage}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                title="Î™®Îì† ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî"
                onPress={resetAllSettings}
                style={styles.warningButton}
                textStyle={styles.warningButtonText}
              />
            </View>
          </View>
        </View>

        {/* Developer Mode Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∞úÎ∞úÏûê Î™®Îìú ÏÑ§Ï†ï"
            icon="üîß"
            count={[isDeveloperMode].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              title="Í∞úÎ∞úÏûê Î™®Îìú"
              description="Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÎπÑÌôúÏÑ±ÌôîÌïòÎ©¥ Ïù¥ ÌôîÎ©¥ÏóêÏÑú ÎÇòÍ∞ëÎãàÎã§"
              value={isDeveloperMode}
              onValueChange={(value) => {
                if (!value) {
                  Alert.alert(
                    'Í∞úÎ∞úÏûê Î™®Îìú ÎπÑÌôúÏÑ±Ìôî',
                    'Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÎπÑÌôúÏÑ±ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                    [
                      { text: 'Ï∑®ÏÜå', style: 'cancel' },
                      { 
                        text: 'ÎπÑÌôúÏÑ±Ìôî', 
                        style: 'destructive',
                        onPress: () => {
                          toggleDeveloperMode();
                          navigation.goBack();
                        }
                      }
                    ]
                  );
                }
              }}
            />
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  navigationBar: {
    height: 44,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: HIGConstants.SPACING_LG,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
  },
  backButton: {
    paddingVertical: HIGConstants.SPACING_SM,
  },
  backButtonText: {
    fontSize: 17,
    color: HIGColors.blue,
    fontWeight: '400',
  },
  navigationTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  disableButtonText: {
    fontSize: 15,
    color: HIGColors.red,
    fontWeight: '500',
  },
  scrollView: {
    flex: 1,
  },
  disabledContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_XL,
  },
  disabledIcon: {
    fontSize: 64,
    marginBottom: HIGConstants.SPACING_LG,
  },
  disabledTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: HIGConstants.SPACING_SM,
    textAlign: 'center',
  },
  disabledDescription: {
    fontSize: 16,
    color: HIGColors.secondaryLabel,
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: HIGConstants.SPACING_XL,
  },
  enableButton: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
  },
  enableButtonText: {
    color: HIGColors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  warningCard: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    padding: HIGConstants.SPACING_MD,
    margin: HIGConstants.SPACING_LG,
    borderWidth: 1,
    borderColor: HIGColors.orange,
    flexDirection: 'row',
    alignItems: 'center',
  },
  warningIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  warningText: {
    flex: 1,
    fontSize: 14,
    color: HIGColors.label,
    lineHeight: 20,
  },
  section: {
    marginBottom: HIGConstants.SPACING_LG,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
  },
  sectionHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  sectionTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  badge: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 2,
    borderRadius: 10,
    marginLeft: HIGConstants.SPACING_SM,
  },
  badgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  card: {
    backgroundColor: '#F8F9FA',
    marginHorizontal: HIGConstants.SPACING_LG,
    borderRadius: HIGConstants.BORDER_RADIUS,
    borderWidth: 1,
    borderColor: HIGColors.gray4,
    overflow: 'hidden',
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
    minHeight: 60,
  },
  settingRowLast: {
    borderBottomWidth: 0,
    borderBottomColor: 'transparent',
  },
  settingIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingInfo: {
    flex: 1,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: HIGColors.label,
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 13,
    color: HIGColors.secondaryLabel,
    lineHeight: 16,
  },
  actionButton: {
    backgroundColor: HIGColors.blue,
    padding: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
    margin: HIGConstants.SPACING_SM,
  },
  actionButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  actionButtonIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_XS,
  },
  actionButtonText: {
    color: HIGColors.white,
    fontSize: 15,
    fontWeight: '600',
  },
  dangerButton: {
    backgroundColor: HIGColors.red,
  },
  dangerButtonText: {
    color: HIGColors.white,
  },
  warningButton: {
    backgroundColor: HIGColors.orange,
  },
  warningButtonText: {
    color: HIGColors.white,
  },
  successButton: {
    backgroundColor: HIGColors.green,
  },
  successButtonText: {
    color: HIGColors.white,
  },
  dataButton: {
    backgroundColor: HIGColors.green,
  },
  userInfoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
  },
  userAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: HIGColors.blue,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: HIGConstants.SPACING_MD,
  },
  userAvatarText: {
    fontSize: 24,
    fontWeight: '600',
    color: HIGColors.white,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    fontSize: 18,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
  },
  userBadges: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  userBadge: {
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 4,
    borderRadius: HIGConstants.BORDER_RADIUS_SM,
    marginRight: HIGConstants.SPACING_XS,
  },
  userBadgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  actionGroup: {
    padding: HIGConstants.SPACING_MD,
  },
  actionGroupTitle: {
    fontSize: 13,
    fontWeight: '600',
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
    textTransform: 'uppercase',
  },
  dangerZone: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    marginTop: HIGConstants.SPACING_SM,
  },
  dangerTitle: {
    color: HIGColors.red,
  },
  restrictedFeature: {
    padding: HIGConstants.SPACING_MD,
    backgroundColor: HIGColors.systemGray6,
    borderRadius: HIGConstants.BORDER_RADIUS_SM,
    marginVertical: HIGConstants.SPACING_XS,
    opacity: 0.6,
  },
  restrictedTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: HIGColors.secondaryLabel,
    marginBottom: 2,
  },
  restrictedDescription: {
    fontSize: 14,
    color: HIGColors.tertiaryLabel,
  },
});

export default DeveloperScreen;