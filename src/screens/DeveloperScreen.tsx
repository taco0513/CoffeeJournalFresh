import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Switch,
  Alert,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../types/navigation';
import { HIGConstants, HIGColors } from '../styles/common';
import { useDevStore } from '../stores/useDevStore';
import { useUserStore } from '../stores/useUserStore';
import { useFeedbackStore } from '../stores/useFeedbackStore';
import RealmService from '../services/realm/RealmService';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ScreenshotService } from '../services/ScreenshotService';

// Category Icons
const CategoryIcons = {
  user: 'üë§',
  debug: 'üêõ',
  test: 'üß™',
  feature: '‚ö°',
  beta: 'üöÄ',
  login: 'üîë',
  data: 'üíæ',
};

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

const DeveloperScreen = () => {
  const navigation = useNavigation<NavigationProp>();
  
  const { currentUser, setTestUser, setGuestMode } = useUserStore();
  const { showFeedback, enableShakeToFeedback, toggleShakeToFeedback, isBetaUser, setBetaStatus } = useFeedbackStore();
  const {
    isDeveloperMode,
    showDebugInfo,
    enableNetworkLogs,
    enableRealmLogs,
    showPerformanceMetrics,
    enableMockData,
    forceGuestMode,
    skipAnimations,
    bypassLogin,
    enableExperimentalFeatures,
    enableBetaFeatures,
    toggleDeveloperMode,
    setDebugInfo,
    setNetworkLogs,
    setRealmLogs,
    setPerformanceMetrics,
    setMockData,
    setForceGuestMode,
    setSkipAnimations,
    setBypassLogin,
    setExperimentalFeatures,
    setBetaFeatures,
    resetAllSettings,
  } = useDevStore();

  const handleClearStorage = () => {
    Alert.alert(
      'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú',
      'Î™®Îì† Ïï± Îç∞Ïù¥ÌÑ∞(ÏÑ§Ï†ï, Ï∫êÏãú Îì±)Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏï±Ïù¥ Ïû¨ÏãúÏûëÎê©ÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.clear();
              Alert.alert('ÏôÑÎ£å', 'Ï†ÄÏû•ÏÜåÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§. Ïï±ÏùÑ Ïû¨ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.');
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleClearRealmData = () => {
    Alert.alert(
      'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
      'Î™®Îì† ÌÖåÏù¥Ïä§ÌåÖ Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              if (realmService.isInitialized) {
                const realm = realmService.getRealm();
                realm.write(() => {
                  realm.deleteAll();
                });
                Alert.alert('ÏôÑÎ£å', 'Realm Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
              }
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  // Screenshot functions
  const handleViewScreenshots = async () => {
    const screenshots = await ScreenshotService.getSavedScreenshots();
    Alert.alert(
      'Ï†ÄÏû•Îêú Ïä§ÌÅ¨Î¶∞ÏÉ∑',
      screenshots.length > 0 
        ? `${screenshots.length}Í∞úÏùò Ïä§ÌÅ¨Î¶∞ÏÉ∑Ïù¥ ÏûàÏäµÎãàÎã§.\n\nÏµúÍ∑º ÌååÏùº:\n${screenshots.slice(0, 3).map(path => path.split('/').pop()).join('\n')}`
        : 'Ï†ÄÏû•Îêú Ïä§ÌÅ¨Î¶∞ÏÉ∑Ïù¥ ÏóÜÏäµÎãàÎã§.',
      [{ text: 'ÌôïÏù∏' }]
    );
  };

  const handleClearScreenshots = () => {
    Alert.alert(
      'Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÏÇ≠Ï†ú',
      'Î™®Îì† Ï†ÄÏû•Îêú Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            const success = await ScreenshotService.clearAllScreenshots();
            Alert.alert(
              success ? 'ÏôÑÎ£å' : 'Ïò§Î•ò',
              success ? 'Î™®Îì† Ïä§ÌÅ¨Î¶∞ÏÉ∑Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.' : 'Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            );
          }
        }
      ]
    );
  };

  const handleScreenshotGuide = () => {
    Alert.alert(
      'Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∞ÄÏù¥Îìú',
      'Ïï± Ïä§ÌÅ¨Î¶∞Îì§ÏùÑ Ïù¥ÎØ∏ÏßÄÎ°ú Ï†ÄÏû•ÌïòÎäî Î∞©Î≤ï:\n\n1. iOS ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ ÏÇ¨Ïö©:\n   Device > Screenshot Î©îÎâ¥\n\n2. Ïã§Ï†ú Í∏∞Í∏∞:\n   Ìôà+Ï†ÑÏõê Î≤ÑÌäº ÎèôÏãú ÎàÑÎ¶Ñ\n\n3. ÏûêÎèô Ïä§ÌÅ¨Î¶∞ÏÉ∑ (Í∞úÎ∞ú Ï§ë):\n   Í∞Å ÌôîÎ©¥Ïóê Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∏∞Îä• Ï∂îÍ∞Ä ÏòàÏ†ï\n\nÏ†ÄÏû•Îêú Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏùÄ ÏÇ¨ÏßÑ Ïï±ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      [{ text: 'ÌôïÏù∏' }]
    );
  };

  const handleAddSimpleTest = () => {
    Alert.alert(
      'Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏',
      '1Í∞úÏùò Í∞ÑÎã®Ìïú ÌÖåÏù¥Ïä§ÌåÖ Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ï∂îÍ∞Ä',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              
              if (!realmService.isInitialized) {
                await realmService.initialize();
              }
              
              const simpleData = {
                coffeeInfo: {
                  cafeName: 'Test Cafe',
                  roastery: 'Test Roaster',
                  coffeeName: 'Test Coffee',
                  origin: 'Test Origin',
                  variety: 'Test Variety',
                  process: 'Washed',
                  altitude: '1000m',
                  temperature: 'hot' as const
                },
                roasterNotes: 'Simple test notes',
                selectedFlavors: [
                  { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' }
                ],
                sensoryAttributes: {
                  body: 3,
                  acidity: 3,
                  sweetness: 3,
                  finish: 3,
                  mouthfeel: 'Clean'
                },
                matchScore: { total: 85, flavorScore: 40, sensoryScore: 45 }
              };
              
              console.log('üß™ Saving simple test data...');
              const savedRecord = await realmService.saveTasting(simpleData);
              console.log('‚úÖ Simple test saved with ID:', savedRecord.id);
              
              const allRecords = realmService.getTastingRecords({ isDeleted: false });
              console.log('üîç Total records after simple test:', allRecords.length);
              
              Alert.alert('ÏôÑÎ£å', `Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.\n\nID: ${savedRecord.id}\nÏ†ÑÏ≤¥ Í∏∞Î°ù: ${allRecords.length}Í∞ú`);
            } catch (error) {
              console.error('‚ùå Simple test failed:', error);
              Alert.alert('Ïò§Î•ò', `ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: ${error.message}`);
            }
          },
        },
      ]
    );
  };

  const handleAddQuickTest = () => {
    Alert.alert(
      'Îπ†Î•∏ ÌÖåÏä§Ìä∏',
      '5Í∞úÏùò Í∞ÑÎã®Ìïú ÌÖåÏù¥Ïä§ÌåÖ Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ï∂îÍ∞Ä',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              
              if (!realmService.isInitialized) {
                await realmService.initialize();
              }
              
              const quickTestData = [
                {
                  coffeeInfo: {
                    cafeName: 'Blue Bottle Coffee ÏÇºÏ≤≠Ï†ê',
                    roastery: 'Blue Bottle Coffee',
                    coffeeName: 'Three Africas',
                    origin: 'Ethiopia',
                    variety: 'Heirloom',
                    process: 'Washed',
                    altitude: '1800m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bright and clean with floral notes',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 3,
                    finish: 4,
                    mouthfeel: 'Clean'
                  },
                  matchScore: { total: 89, flavorScore: 43, sensoryScore: 46 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Fritz Coffee ÏÑ±ÏàòÏ†ê',
                    roastery: 'Fritz Coffee',
                    coffeeName: 'Colombia Geisha',
                    origin: 'Colombia',
                    variety: 'Geisha',
                    process: 'Honey',
                    altitude: '1600m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Complex tropical fruit notes',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Other Fruit', koreanValue: 'Í∏∞ÌÉÄ Í≥ºÏùº' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 5,
                    sweetness: 4,
                    finish: 5,
                    mouthfeel: 'Juicy'
                  },
                  matchScore: { total: 92, flavorScore: 47, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Anthracite ÌïúÎÇ®Ï†ê',
                    roastery: 'Anthracite',
                    coffeeName: 'Brazil Santos',
                    origin: 'Brazil',
                    variety: 'Catuai',
                    process: 'Natural',
                    altitude: '1200m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Rich chocolate and nuts',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Dark Chocolate', koreanValue: 'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø' }
                  ],
                  sensoryAttributes: {
                    body: 5,
                    acidity: 2,
                    sweetness: 4,
                    finish: 3,
                    mouthfeel: 'Creamy'
                  },
                  matchScore: { total: 85, flavorScore: 40, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Terarosa Í∞ïÎÇ®Ï†ê',
                    roastery: 'Terarosa',
                    coffeeName: 'Guatemala Antigua',
                    origin: 'Guatemala',
                    variety: 'Bourbon',
                    process: 'Washed',
                    altitude: '1500m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Balanced chocolate and spice',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Spices', koreanValue: 'Ìñ•Ïã†Î£å' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 3,
                    sweetness: 4,
                    finish: 4,
                    mouthfeel: 'Silky'
                  },
                  matchScore: { total: 86, flavorScore: 41, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Starbucks Í∞ïÎÇ®Ï†ê',
                    roastery: 'Starbucks',
                    coffeeName: 'Pike Place',
                    origin: 'Latin America',
                    variety: 'Various',
                    process: 'Washed',
                    altitude: '1200m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Smooth and balanced',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 2,
                    sweetness: 3,
                    finish: 3,
                    mouthfeel: 'Smooth'
                  },
                  matchScore: { total: 78, flavorScore: 38, sensoryScore: 40 }
                }
              ];
              
              console.log('‚ö° Saving quick test data...');
              let savedCount = 0;
              
              for (const testItem of quickTestData) {
                try {
                  await realmService.saveTasting(testItem);
                  savedCount++;
                  console.log(`‚úÖ Saved ${savedCount}/${quickTestData.length}`);
                } catch (error) {
                  console.error(`‚ùå Failed to save item ${savedCount + 1}:`, error);
                }
              }
              
              const allRecords = realmService.getTastingRecords({ isDeleted: false });
              console.log('üîç Total records after quick test:', allRecords.length);
              
              Alert.alert('ÏôÑÎ£å', `Îπ†Î•∏ ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ${savedCount}Í∞úÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.\n\nÏ†ÑÏ≤¥ Í∏∞Î°ù: ${allRecords.length}Í∞ú\n\nJournal ÌÉ≠ÏóêÏÑú ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!`);
            } catch (error) {
              console.error('‚ùå Quick test failed:', error);
              Alert.alert('Ïò§Î•ò', `ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: ${error.message}`);
            }
          },
        },
      ]
    );
  };

  const handleAddTestData = () => {
    Alert.alert(
      'ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä',
      'ÏÉòÌîå ÌÖåÏù¥Ïä§ÌåÖ Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ï∂îÍ∞Ä',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              
              // RealmÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Ï¥àÍ∏∞Ìôî
              if (!realmService.isInitialized) {
                console.log('üîß Initializing Realm...');
                await realmService.initialize();
                console.log('‚úÖ Realm initialized');
              } else {
                console.log('‚úÖ Realm already initialized');
              }
              
              const testTastings = [
                {
                  coffeeInfo: {
                    cafeName: 'Blue Bottle Coffee ÏÇºÏ≤≠Ï†ê',
                    roastery: 'Blue Bottle Coffee',
                    coffeeName: 'Three Africas',
                    origin: 'Ethiopia / Yirgacheffe',
                    variety: 'Heirloom',
                    process: 'Washed',
                    altitude: '1,800-2,000m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bright and clean with floral notes, hints of lemon and bergamot.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' },
                    { level: 3, value: 'Lemon', koreanValue: 'Î†àÎ™¨' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 3,
                    finish: 4,
                    mouthfeel: 'Clean'
                  },
                  matchScore: { total: 89, flavorScore: 43, sensoryScore: 46 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Fritz Coffee Company ÏÑ±ÏàòÏ†ê',
                    roastery: 'Fritz Coffee Company',
                    coffeeName: 'Colombia Geisha',
                    origin: 'Colombia / Huila',
                    variety: 'Geisha',
                    process: 'Honey',
                    altitude: '1,600-1,800m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Complex and elegant with tropical fruit notes and wine-like acidity.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Other Fruit', koreanValue: 'Í∏∞ÌÉÄ Í≥ºÏùº' },
                    { level: 3, value: 'Mango', koreanValue: 'ÎßùÍ≥†' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 5,
                    sweetness: 4,
                    finish: 5,
                    mouthfeel: 'Juicy'
                  },
                  matchScore: { total: 92, flavorScore: 47, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Anthracite Coffee ÌïúÎÇ®Ï†ê',
                    roastery: 'Anthracite Coffee',
                    coffeeName: 'Single Origin Blend',
                    origin: 'Brazil / Santos',
                    variety: 'Catuai',
                    process: 'Natural',
                    altitude: '1,200-1,400m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Rich chocolate notes with nutty undertones and caramel sweetness.',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Dark Chocolate', koreanValue: 'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Hazelnut', koreanValue: 'Ìó§Ïù¥Ï¶êÎÑõ' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Caramel', koreanValue: 'Ïπ¥ÎùºÎ©ú' }
                  ],
                  sensoryAttributes: {
                    body: 5,
                    acidity: 2,
                    sweetness: 4,
                    finish: 3,
                    mouthfeel: 'Creamy' as const
                  },
                  matchScore: { total: 85, flavorScore: 40, sensoryScore: 45 },
                  personalComment: 'Anthracite ÌïúÎÇ®Ï†êÏóêÏÑú ÎßàÏã† Î∏åÎùºÏßà ÎÇ¥Ï∂îÎü¥ ÌîÑÎ°úÏÑ∏Ïã± Ïª§Ìîº. ÏïÑÏù¥Ïä§Î°ú ÎßàÏÖ®ÎäîÎç∞ÎèÑ Ï¥àÏΩúÎ¶øÍ≥º Í≤¨Í≥ºÎ•ò Ìñ•Ïù¥ ÏßÑÌïòÍ≤å ÎäêÍª¥ÏßÑÎã§. Î∞îÎîîÍ∞êÏù¥ Ï¢ãÍ≥† ÌÅ¨Î¶¨ÎØ∏Ìïú ÌÖçÏä§Ï≥êÍ∞Ä Ïù∏ÏÉÅÏ†ÅÏù¥Îã§.',
                  brewingMethod: 'Cold Brew',
                  grindSize: 'Coarse',
                  waterTemp: 'Cold',
                  brewTime: '12ÏãúÍ∞Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Cafe Onion ÏÑ±ÏàòÏ†ê',
                    roastery: 'Onion Coffee',
                    coffeeName: 'Kenya AA',
                    origin: 'Kenya / Nyeri',
                    variety: 'SL28, SL34',
                    process: 'Washed',
                    altitude: '1,500-1,700m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bold and bright with blackcurrant notes and wine-like complexity.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Berry', koreanValue: 'Î≤†Î¶¨' },
                    { level: 3, value: 'Blackcurrant', koreanValue: 'Î∏îÎûôÏª§Îü∞Ìä∏' },
                    { level: 1, value: 'Sour/Fermented', koreanValue: 'Ïã†Îßõ/Î∞úÌö®' },
                    { level: 2, value: 'Wine', koreanValue: 'ÏôÄÏù∏' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 5,
                    sweetness: 2,
                    finish: 4,
                    mouthfeel: 'Clean' as const
                  },
                  matchScore: { total: 87, flavorScore: 44, sensoryScore: 43 },
                  personalComment: 'Ïπ¥Ìéò Ïñ¥ÎãàÏñ∏ÏóêÏÑú ÎßàÏã† ÏºÄÎÉê Ïª§Ìîº. Î∏îÎûôÏª§Îü∞Ìä∏Ìñ•Ïù¥ Ï†ïÎßê Í∞ïÌïòÍ≥† ÏôÄÏù∏Í∞ôÏùÄ Î≥µÏû°Ìïú ÎßõÏù¥ Ïù∏ÏÉÅÏ†ÅÏù¥Îã§. ÏÇ∞ÎØ∏Í∞Ä Í∞ïÌï¥ÏÑú Ìò∏Î∂àÌò∏Í∞Ä Í∞àÎ¶¥ Ïàò ÏûàÏßÄÎßå Í∞úÏÑ±Ïù¥ ÎöúÎ†∑Ìïú Ïª§ÌîºÎã§.',
                  brewingMethod: 'Chemex',
                  grindSize: 'Medium-Coarse',
                  waterTemp: '94¬∞C',
                  brewTime: '5Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Terarosa Coffee Í∞ïÎÇ®Ï†ê',
                    roastery: 'Terarosa Coffee',
                    coffeeName: 'Guatemala Antigua',
                    origin: 'Guatemala / Antigua',
                    variety: 'Bourbon, Typica',
                    process: 'Washed',
                    altitude: '1,500-1,900m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Full-bodied with chocolate and spice notes, smooth and balanced.',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Milk Chocolate', koreanValue: 'Î∞ÄÌÅ¨ Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Spices', koreanValue: 'Ìñ•Ïã†Î£å' },
                    { level: 2, value: 'Cinnamon', koreanValue: 'Í≥ÑÌîº' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Almond', koreanValue: 'ÏïÑÎ™¨Îìú' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 3,
                    sweetness: 4,
                    finish: 4,
                    mouthfeel: 'Silky' as const
                  },
                  matchScore: { total: 86, flavorScore: 41, sensoryScore: 45 },
                  personalComment: 'ÌÖåÎùºÎ°úÏÇ¨ Í∞ïÎÇ®Ï†êÏóêÏÑú ÎßàÏã† Í≥ºÌÖåÎßêÎùº ÏïàÌã∞Íµ¨ÏïÑ. Ï¥àÏΩúÎ¶øÍ≥º Í≥ÑÌîºÌñ•Ïù¥ Ï°∞ÌôîÎ°≠Í≥† Î∞îÎîîÍ∞êÏù¥ Ï¢ãÎã§. Î∞∏Îü∞Ïä§Í∞Ä Ïûò Ïû°ÌòÄ ÏûàÏñ¥ÏÑú Îß§Ïùº ÎßàÏÖîÎèÑ ÏßàÎ¶¨ÏßÄ ÏïäÏùÑ Í≤É Í∞ôÎã§.',
                  brewingMethod: 'French Press',
                  grindSize: 'Coarse',
                  waterTemp: '95¬∞C',
                  brewTime: '4Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Starbucks Í∞ïÎÇ®RÏ†ê',
                    roastery: 'Starbucks',
                    coffeeName: 'Pike Place Roast',
                    origin: 'Latin America',
                    variety: 'Various',
                    process: 'Washed',
                    altitude: '1,200-1,500m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Smooth and balanced with notes of chocolate and toasted nuts.',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Cocoa', koreanValue: 'ÏΩîÏΩîÏïÑ' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Nutty', koreanValue: 'Í≤¨Í≥ºÎ•ò' },
                    { level: 3, value: 'Peanuts', koreanValue: 'ÎïÖÏΩ©' },
                    { level: 1, value: 'Roasted', koreanValue: 'Î°úÏä§ÌåÖÌñ•' },
                    { level: 2, value: 'Cereal', koreanValue: 'ÏãúÎ¶¨Ïñº' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 2,
                    sweetness: 3,
                    finish: 3,
                    mouthfeel: 'Smooth' as const
                  },
                  matchScore: { total: 78, flavorScore: 38, sensoryScore: 40 },
                  personalComment: 'Ïä§ÌÉÄÎ≤ÖÏä§ ÌååÏù¥ÌÅ¨ ÌîåÎ†àÏù¥Ïä§ Î°úÏä§Ìä∏. ÌèâÎ≤îÌïòÏßÄÎßå ÏïàÏ†ïÏ†ÅÏù∏ ÎßõÏù¥Îã§. Ï¥àÏΩúÎ¶øÍ≥º Í≤¨Í≥ºÎ•ò Ìñ•Ïù¥ ÏûàÏßÄÎßå ÌäπÎ≥ÑÌï®ÏùÄ ÏóÜÎã§. Í∑∏ÎûòÎèÑ Ïñ∏Ï†ú Ïñ¥ÎîîÏÑúÎÇò ÎßàÏã§ Ïàò ÏûàÎã§Îäî Ïû•Ï†êÏù¥ ÏûàÎã§.',
                  brewingMethod: 'Drip',
                  grindSize: 'Medium',
                  waterTemp: '90¬∞C',
                  brewTime: '6Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Paul Bassett Ï≤≠Îã¥Ï†ê',
                    roastery: 'Paul Bassett',
                    coffeeName: 'Ethiopia Sidamo',
                    origin: 'Ethiopia / Sidamo',
                    variety: 'Heirloom',
                    process: 'Natural',
                    altitude: '1,600-2,000m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Fruity and sweet with blueberry and wine-like characteristics.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Berry', koreanValue: 'Î≤†Î¶¨' },
                    { level: 3, value: 'Blueberry', koreanValue: 'Î∏îÎ£®Î≤†Î¶¨' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Vanillin', koreanValue: 'Î∞îÎãêÎ¶∞' },
                    { level: 1, value: 'Sour/Fermented', koreanValue: 'Ïã†Îßõ/Î∞úÌö®' },
                    { level: 2, value: 'Winey', koreanValue: 'ÏôÄÏù∏Ìñ•' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 5,
                    finish: 4,
                    mouthfeel: 'Juicy' as const
                  },
                  matchScore: { total: 90, flavorScore: 45, sensoryScore: 45 },
                  personalComment: 'Ìè¥Î∞îÏÖã Ï≤≠Îã¥Ï†êÏóêÏÑú ÎßàÏã† ÏóêÌã∞Ïò§ÌîºÏïÑ ÏãúÎã§Î™® ÏïÑÏù¥Ïä§Ïª§Ìîº. Î∏îÎ£®Î≤†Î¶¨Ìñ•Ïù¥ ÏßÑÏßú Î∏îÎ£®Î≤†Î¶¨ Î®πÎäî Í≤ÉÏ≤òÎüº Îã¨ÏΩ§ÌïòÍ≥† Í≥ºÏùºÌñ•Ïù¥ ÌíçÎ∂ÄÌïòÎã§. ÏïÑÏù¥Ïä§Î°ú ÎßàÏÖîÎèÑ Ìñ•Ïù¥ ÏÇ¥ÏïÑÏûàÏñ¥ÏÑú ÎÜÄÎûêÎã§.',
                  brewingMethod: 'Pour Over (Iced)',
                  grindSize: 'Medium-Fine',
                  waterTemp: '92¬∞C',
                  brewTime: '3Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Coffee Lab R ÏÑ±ÏàòÏ†ê',
                    roastery: 'Coffee Lab R',
                    coffeeName: 'Honduras COE #3',
                    origin: 'Honduras / Marcala',
                    variety: 'Pacas',
                    process: 'Honey',
                    altitude: '1,400-1,600m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Stone fruit sweetness with brown sugar and orange notes.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Other Fruit', koreanValue: 'Í∏∞ÌÉÄ Í≥ºÏùº' },
                    { level: 3, value: 'Peach', koreanValue: 'Î≥µÏà≠ÏïÑ' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Brown Sugar', koreanValue: 'ÌùëÏÑ§ÌÉï' },
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' },
                    { level: 3, value: 'Orange', koreanValue: 'Ïò§Î†åÏßÄ' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 3,
                    sweetness: 5,
                    finish: 4,
                    mouthfeel: 'Syrupy' as const
                  },
                  matchScore: { total: 88, flavorScore: 44, sensoryScore: 44 },
                  personalComment: 'Ïª§ÌîºÎû©R ÏÑ±ÏàòÏ†êÏùò Ïò®ÎëêÎùºÏä§ COE Ïª§Ìîº. Î≥µÏà≠ÏïÑÏôÄ Ïò§Î†åÏßÄ Ìñ•Ïù¥ Ï†ïÎßê Í≥ºÏùºÏ£ºÏä§ Í∞ôÎã§. ÌóàÎãà ÌîÑÎ°úÏÑ∏Ïã±Ïùò ÌäπÏÑ±Ïù¥ Ïûò ÎìúÎü¨ÎÇòÎäî Ïª§ÌîºÎ°ú Îã®ÎßõÏù¥ ÏûêÏó∞Ïä§ÎüΩÍ≥† ÍπîÎÅîÌïòÎã§.',
                  brewingMethod: 'Aeropress',
                  grindSize: 'Fine',
                  waterTemp: '88¬∞C',
                  brewTime: '2Î∂Ñ 30Ï¥à'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Hollys Coffee Ïó≠ÏÇºÏ†ê',
                    roastery: 'Hollys Coffee',
                    coffeeName: 'Costa Rica Tarraz√∫',
                    origin: 'Costa Rica / Tarraz√∫',
                    variety: 'Caturra, Catuai',
                    process: 'Washed',
                    altitude: '1,200-1,600m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Clean and bright with citrus acidity and milk chocolate finish.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' },
                    { level: 3, value: 'Grapefruit', koreanValue: 'ÏûêÎ™Ω' },
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Milk Chocolate', koreanValue: 'Î∞ÄÌÅ¨ Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Green/Vegetative', koreanValue: 'ÌíÄ/Ï±ÑÏÜåÌñ•' },
                    { level: 2, value: 'Fresh', koreanValue: 'Ïã†ÏÑ†ÌïúÌñ•' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 3,
                    finish: 3,
                    mouthfeel: 'Clean' as const
                  },
                  matchScore: { total: 82, flavorScore: 40, sensoryScore: 42 },
                  personalComment: 'Ìï†Î¶¨Ïä§ Ïó≠ÏÇºÏ†êÏóêÏÑú ÎßàÏã† ÏΩîÏä§ÌÉÄÎ¶¨Ïπ¥ ÌÉÄÎùºÏ£º. ÏûêÎ™ΩÍ∞ôÏùÄ ÏãúÌä∏Îü¨Ïä§ ÏÇ∞ÎØ∏Í∞Ä ÏÉÅÏæåÌïòÍ≥† ÍπîÎÅîÌïòÎã§. Î∞ÄÌÅ¨ Ï¥àÏΩúÎ¶ø Îí∑ÎßõÏù¥ Í∑†ÌòïÏùÑ Ïû°ÏïÑÏ£ºÏñ¥ ÎßàÏãúÍ∏∞ Ìé∏Ìïú Ïª§ÌîºÎã§.',
                  brewingMethod: 'Pour Over',
                  grindSize: 'Medium',
                  waterTemp: '91¬∞C',
                  brewTime: '4Î∂Ñ 30Ï¥à'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Twosome Place ÏÇºÏÑ±Ï†ê',
                    roastery: 'Twosome Place',
                    coffeeName: 'Jamaica Blue Mountain',
                    origin: 'Jamaica / Blue Mountain',
                    variety: 'Typica',
                    process: 'Washed',
                    altitude: '900-1,500m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Mild and sweet with subtle floral notes and clean finish.',
                  selectedFlavors: [
                    { level: 1, value: 'Floral', koreanValue: 'ÍΩÉÌñ•Í∏∞' },
                    { level: 2, value: 'Black Tea', koreanValue: 'ÌôçÏ∞®' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Overall Sweet', koreanValue: 'Ï†ÑÎ∞òÏ†Å Îã®Îßõ' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Nutty', koreanValue: 'Í≤¨Í≥ºÎ•ò' },
                    { level: 3, value: 'Almond', koreanValue: 'ÏïÑÎ™¨Îìú' }
                  ],
                  sensoryAttributes: {
                    body: 2,
                    acidity: 3,
                    sweetness: 4,
                    finish: 4,
                    mouthfeel: 'Delicate' as const
                  },
                  matchScore: { total: 84, flavorScore: 42, sensoryScore: 42 },
                  personalComment: 'Ìà¨Ïç∏ÌîåÎ†àÏù¥Ïä§Ïùò ÏûêÎ©îÏù¥Ïπ¥ Î∏îÎ£®ÎßàÏö¥Ìã¥. ÎßàÏùºÎìúÌïòÍ≥† Ïö∞ÏïÑÌïú ÎßõÏù¥Îã§. ÍΩÉÌñ•Í∏∞ÏôÄ Í≤¨Í≥ºÎ•òÌñ•Ïù¥ ÏùÄÏùÄÌïòÍ≤å ÎäêÍª¥ÏßÄÍ≥† Îí∑ÎßõÏù¥ ÍπîÎÅîÌïòÎã§. ÎπÑÏã∏ÏßÄÎßå Í∑∏ÎßåÌïú Í∞ÄÏπòÍ∞Ä ÏûàÎäî Ïª§Ìîº.',
                  brewingMethod: 'Siphon',
                  grindSize: 'Medium',
                  waterTemp: '92¬∞C',
                  brewTime: '8Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Ediya Coffee ÏÑ†Î¶âÏ†ê',
                    roastery: 'Ediya Coffee',
                    coffeeName: 'Colombia Supremo',
                    origin: 'Colombia / Nari√±o',
                    variety: 'Castillo',
                    process: 'Washed',
                    altitude: '1,500-2,000m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Balanced with caramel sweetness and mild fruit notes.',
                  selectedFlavors: [
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Caramel', koreanValue: 'Ïπ¥ÎùºÎ©ú' },
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Dried Fruit', koreanValue: 'Í±¥Í≥ºÏùº' },
                    { level: 3, value: 'Raisin', koreanValue: 'Í±¥Ìè¨ÎèÑ' },
                    { level: 1, value: 'Roasted', koreanValue: 'Î°úÏä§ÌåÖÌñ•' },
                    { level: 2, value: 'Tobacco', koreanValue: 'Îã¥Î∞∞' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 3,
                    sweetness: 4,
                    finish: 3,
                    mouthfeel: 'Smooth' as const
                  },
                  matchScore: { total: 80, flavorScore: 39, sensoryScore: 41 },
                  personalComment: 'Ïù¥ÎîîÏïº ÏÑ†Î¶âÏ†êÏùò ÏΩúÎ°¨ÎπÑÏïÑ ÏàòÌîÑÎ¶¨Î™® ÏïÑÏù¥Ïä§. Ïπ¥ÎùºÎ©ú Îã®ÎßõÍ≥º Í±¥Ìè¨ÎèÑÌñ•Ïù¥ ÌäπÏßïÏ†ÅÏù¥Îã§. ÏïÑÏù¥Ïä§Î°ú ÎßàÏÖîÎèÑ ÌíçÎØ∏Í∞Ä ÏÇ¥ÏïÑÏûàÍ≥† Í∞ÄÍ≤© ÎåÄÎπÑ Í¥úÏ∞ÆÏùÄ ÌÄÑÎ¶¨Ìã∞Îã§.',
                  brewingMethod: 'Cold Drip',
                  grindSize: 'Medium-Coarse',
                  waterTemp: 'Cold',
                  brewTime: '8ÏãúÍ∞Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'A Twosome Place Í∞ïÎÇ®Ï†ê',
                    roastery: 'A Twosome Place',
                    coffeeName: 'Panama Geisha',
                    origin: 'Panama / Boquete',
                    variety: 'Geisha',
                    process: 'Natural',
                    altitude: '1,500-1,700m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Exotic and complex with tropical fruit, jasmine, and bergamot notes.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Other Fruit', koreanValue: 'Í∏∞ÌÉÄ Í≥ºÏùº' },
                    { level: 3, value: 'Passion Fruit', koreanValue: 'Ìå®ÏÖòÌîÑÎ£®Ìä∏' },
                    { level: 1, value: 'Floral', koreanValue: 'ÍΩÉÌñ•Í∏∞' },
                    { level: 2, value: 'Jasmine', koreanValue: 'ÏûêÏä§ÎØº' },
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' },
                    { level: 3, value: 'Bergamot', koreanValue: 'Î≤†Î•¥Í∞ÄÎ™ª' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 5,
                    sweetness: 5,
                    finish: 5,
                    mouthfeel: 'Tea-like' as const
                  },
                  matchScore: { total: 94, flavorScore: 48, sensoryScore: 46 },
                  personalComment: 'AÌà¨Ïç∏Ïùò ÌååÎÇòÎßà Í≤åÏù¥ÏÉ§Îäî Ï†ïÎßê ÎÜÄÎùºÏö¥ Ïª§ÌîºÏòÄÎã§. Ìå®ÏÖòÌîÑÎ£®Ìä∏ÏôÄ ÏûêÏä§ÎØºÌñ•Ïù¥ ÏóÑÏ≤≠ÎÇòÍ≤å ÌôîÎ†§ÌïòÍ≥† Î≤†Î•¥Í∞ÄÎ™ªÌñ•ÍπåÏßÄ ÎäêÍª¥ÏßÑÎã§. ÎßàÏπò Ìñ•ÏàòÎ•º ÎßàÏãúÎäî Í≤É Í∞ôÏùÄ Í≤ΩÌóòÏù¥ÏóàÎã§.',
                  brewingMethod: 'V60',
                  grindSize: 'Medium-Fine',
                  waterTemp: '89¬∞C',
                  brewTime: '3Î∂Ñ'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Mega Coffee Í∞ïÎÇ®Ïó≠Ï†ê',
                    roastery: 'Mega Coffee',
                    coffeeName: 'Vietnam Robusta Blend',
                    origin: 'Vietnam / Dak Lak',
                    variety: 'Robusta',
                    process: 'Natural',
                    altitude: '500-800m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Strong and bold with earthy and nutty characteristics.',
                  selectedFlavors: [
                    { level: 1, value: 'Other', koreanValue: 'Í∏∞ÌÉÄ' },
                    { level: 2, value: 'Chemical', koreanValue: 'ÌôîÌïôÏ†ÅÌñ•' },
                    { level: 3, value: 'Rubber', koreanValue: 'Í≥†Î¨¥' },
                    { level: 1, value: 'Roasted', koreanValue: 'Î°úÏä§ÌåÖÌñ•' },
                    { level: 2, value: 'Burnt', koreanValue: 'ÌÉÑÌñ•' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Nutty', koreanValue: 'Í≤¨Í≥ºÎ•ò' }
                  ],
                  sensoryAttributes: {
                    body: 5,
                    acidity: 1,
                    sweetness: 2,
                    finish: 2,
                    mouthfeel: 'Heavy' as const
                  },
                  matchScore: { total: 72, flavorScore: 35, sensoryScore: 37 },
                  personalComment: 'Î©îÍ∞ÄÏª§ÌîºÏùò Î≤†Ìä∏ÎÇ® Î°úÎ∂ÄÏä§ÌÉÄ Î∏îÎ†åÎìú. ÏßÑÌïòÍ≥† Ïì¥ÎßõÏù¥ Í∞ïÌïòÎã§. Í≥†Î¨¥ÎÉÑÏÉàÏôÄ ÌÉÑÎßõÏù¥ ÎäêÍª¥Ï†∏ÏÑú Í∞úÏù∏Ï†ÅÏúºÎ°úÎäî Î≥ÑÎ°úÏòÄÎã§. ÌïòÏßÄÎßå Í∞ÄÍ≤©Ïù¥ Ï†ÄÎ†¥Ìï¥ÏÑú Í∑∏Îü∞Í∞ÄÎ≥¥Îã§.',
                  brewingMethod: 'Espresso (Iced)',
                  grindSize: 'Fine',
                  waterTemp: '93¬∞C',
                  brewTime: '25Ï¥à'
                },
                {
                  coffeeInfo: {
                    cafeName: 'Mammoth Coffee Ïù¥ÌÉúÏõêÏ†ê',
                    roastery: 'Mammoth Coffee',
                    coffeeName: 'Rwanda Bourbon',
                    origin: 'Rwanda / Nyamasheke',
                    variety: 'Red Bourbon',
                    process: 'Washed',
                    altitude: '1,700-2,000m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bright and sweet with red fruit, brown sugar, and tea-like finish.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Berry', koreanValue: 'Î≤†Î¶¨' },
                    { level: 3, value: 'Strawberry', koreanValue: 'Îî∏Í∏∞' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Brown Sugar', koreanValue: 'ÌùëÏÑ§ÌÉï' },
                    { level: 1, value: 'Floral', koreanValue: 'ÍΩÉÌñ•Í∏∞' },
                    { level: 2, value: 'Black Tea', koreanValue: 'ÌôçÏ∞®' },
                    { level: 1, value: 'Spices', koreanValue: 'Ìñ•Ïã†Î£å' },
                    { level: 2, value: 'Clove', koreanValue: 'Ï†ïÌñ•' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 4,
                    finish: 4,
                    mouthfeel: 'Silky' as const
                  },
                  matchScore: { total: 91, flavorScore: 46, sensoryScore: 45 },
                  personalComment: 'Îß§Î®∏ÎìúÏª§Ìîº Ïù¥ÌÉúÏõêÏ†êÏùò Î•¥ÏôÑÎã§ Î∂ÄÎ•¥Î¥â. Îî∏Í∏∞Ìñ•Ïù¥ Ï†ïÎßê ÏßÑÌïòÍ≥† ÌùëÏÑ§ÌÉïÏùò Îã®ÎßõÏù¥ Ï¢ãÎã§. ÌôçÏ∞®Í∞ôÏùÄ ÍπîÎÅîÌïú Îí∑ÎßõÎèÑ ÎßàÏùåÏóê Îì†Îã§. ÏïÑÌîÑÎ¶¨Ïπ¥ Ïª§ÌîºÏùò Îß§Î†•ÏùÑ Ïûò Î≥¥Ïó¨Ï£ºÎäî Ïª§ÌîºÎã§.',
                  brewingMethod: 'Kalita Wave',
                  grindSize: 'Medium',
                  waterTemp: '93¬∞C',
                  brewTime: '5Î∂Ñ 30Ï¥à'
                }
              ];

              // Save test data 
              console.log('üß™ Saving test data - total items:', testTastings.length);
              for (let i = 0; i < testTastings.length; i++) {
                const testTasting = testTastings[i];
                console.log(`üß™ Saving item ${i + 1}:`, testTasting.coffeeInfo.coffeeName);
                try {
                  const savedRecord = await realmService.saveTasting(testTasting);
                  console.log(`‚úÖ Saved item ${i + 1} with ID:`, savedRecord.id);
                } catch (error) {
                  console.error(`‚ùå Failed to save item ${i + 1}:`, error);
                }
              }
              
              // Verify data was saved
              const allRecords = realmService.getTastingRecords({ isDeleted: false });
              console.log('üîç Total records in database after saving:', allRecords.length);
              
              const uniqueRoasters = [...new Set(testTastings.map(t => t.coffeeInfo.roastery))];
              const uniqueCafes = [...new Set(testTastings.map(t => t.coffeeInfo.cafeName))];
              
              Alert.alert('ÏôÑÎ£å', `${testTastings.length}Í∞úÏùò ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.\n\nüìç Ïπ¥Ìéò: ${uniqueCafes.length}Í≥≥\n‚òï Î°úÏä§ÌÑ∞Î¶¨: ${uniqueRoasters.length}Í≥≥\nüéØ Ïª§Ìîº: ${testTastings.length}Ï¢Ö\n\nÌè¨Ìï®Îêú Î°úÏä§ÌÑ∞Î¶¨:\n${uniqueRoasters.slice(0, 3).join(', ')}${uniqueRoasters.length > 3 ? ` Ïô∏ ${uniqueRoasters.length - 3}Í≥≥` : ''}\n\nÏ∞∏Í≥†: ÏÉàÎ°úÏö¥ Ïª§Ìîº Î∞úÍ≤¨ ÏïåÎ¶ºÏù¥ ÌëúÏãúÎê† Ïàò ÏûàÏäµÎãàÎã§.`);
            } catch (error) {
              console.error('ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ïò§Î•ò:', error);
              const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
              Alert.alert('Ïò§Î•ò', `ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:\n${errorMessage}`);
            }
          },
        },
      ]
    );
  };

  const SettingRow = ({ 
    title, 
    description, 
    value, 
    onValueChange, 
    icon,
  }: {
    title: string;
    description?: string;
    value?: boolean;
    onValueChange?: (value: boolean) => void;
    icon?: string;
  }) => (
    <View style={styles.settingRow}>
      {icon && (
        <Text style={styles.settingIcon}>{icon}</Text>
      )}
      <View style={styles.settingInfo}>
        <Text style={styles.settingTitle}>{title}</Text>
        {description && (
          <Text style={styles.settingDescription}>{description}</Text>
        )}
      </View>
      <Switch
        value={value}
        onValueChange={onValueChange}
        trackColor={{ false: HIGColors.gray3, true: HIGColors.blue }}
        thumbColor={value ? HIGColors.white : HIGColors.gray}
      />
    </View>
  );

  const ActionButton = ({ title, onPress, style, textStyle, icon }: {
    title: string;
    onPress: () => void;
    style?: any;
    textStyle?: any;
    icon?: string;
  }) => (
    <TouchableOpacity 
      style={[styles.actionButton, style]} 
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.actionButtonContent}>
        {icon && <Text style={styles.actionButtonIcon}>{icon}</Text>}
        <Text style={[styles.actionButtonText, textStyle]}>{title}</Text>
      </View>
    </TouchableOpacity>
  );

  // Section Header Component
  const SectionHeader = ({ 
    title, 
    icon, 
    count,
  }: {
    title: string;
    icon: string;
    count?: number;
  }) => (
    <View style={styles.sectionHeader}>
      <View style={styles.sectionHeaderLeft}>
        <Text style={styles.sectionIcon}>{icon}</Text>
        <Text style={styles.sectionTitle}>{title}</Text>
        {count !== undefined && count > 0 && (
          <View style={styles.badge}>
            <Text style={styles.badgeText}>{count}</Text>
          </View>
        )}
      </View>
    </View>
  );

  if (!isDeveloperMode) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.navigationBar}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
          </TouchableOpacity>
          <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
          <View style={{ width: 30 }} />
        </View>

        <View style={styles.disabledContainer}>
          <Text style={styles.disabledIcon}>üö´</Text>
          <Text style={styles.disabledTitle}>Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎê®</Text>
          <Text style={styles.disabledDescription}>
            Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÌôúÏÑ±ÌôîÌïòÎ†§Î©¥ ÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.{'\n'}
            Ïù¥ Î™®ÎìúÎäî ÎîîÎ≤ÑÍπÖÍ≥º ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Í≥†Í∏â ÏÑ§Ï†ïÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
          </Text>
          <TouchableOpacity
            style={styles.enableButton}
            onPress={toggleDeveloperMode}
          >
            <Text style={styles.enableButtonText}>Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.navigationBar}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
        </TouchableOpacity>
        <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
        <TouchableOpacity onPress={toggleDeveloperMode}>
          <Text style={styles.disableButtonText}>ÎπÑÌôúÏÑ±Ìôî</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Warning */}
        <View style={styles.warningCard}>
          <Text style={styles.warningIcon}>‚ö†Ô∏è</Text>
          <Text style={styles.warningText}>
            Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.{'\n'}
            Ïù¥ ÏÑ§Ï†ïÎì§ÏùÄ Ïï±Ïùò ÎèôÏûëÏóê ÏòÅÌñ•ÏùÑ Ï§Ñ Ïàò ÏûàÏäµÎãàÎã§.
          </Text>
        </View>

        {/* User Info */}
        <View style={styles.section}>
          <SectionHeader
            title="ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥"
            icon={CategoryIcons.user}
          />
          <View style={styles.card}>
            <View style={styles.userInfoCard}>
              <View style={styles.userAvatar}>
                <Text style={styles.userAvatarText}>
                  {currentUser?.username?.charAt(0).toUpperCase() || 'G'}
                </Text>
              </View>
              <View style={styles.userDetails}>
                <Text style={styles.userName}>
                  {currentUser?.username || 'Guest User'}
                </Text>
                <Text style={styles.userEmail}>
                  {currentUser?.email || 'guest@coffejournal.app'}
                </Text>
                <View style={styles.userBadges}>
                  <View style={[styles.userBadge, { backgroundColor: currentUser?.username === 'Guest' ? '#FFC107' : '#4CAF50' }]}>
                    <Text style={styles.userBadgeText}>
                      {currentUser?.username === 'Guest' ? 'Í≤åÏä§Ìä∏' : 'Î°úÍ∑∏Ïù∏'}
                    </Text>
                  </View>
                  {currentUser?.email === 'hello@zimojin.com' && (
                    <View style={[styles.userBadge, { backgroundColor: '#6B46C1' }]}>
                      <Text style={styles.userBadgeText}>Í¥ÄÎ¶¨Ïûê</Text>
                    </View>
                  )}
                </View>
              </View>
            </View>
          </View>
        </View>

        {/* Debug Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÎîîÎ≤ÑÍ∑∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.debug}
            count={[showDebugInfo, enableNetworkLogs, enableRealmLogs, showPerformanceMetrics].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üìä"
              title="ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú"
              description="ÌôîÎ©¥Ïóê ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú"
              value={showDebugInfo}
              onValueChange={setDebugInfo}
            />
            <SettingRow
              icon="üåê"
              title="ÎÑ§Ìä∏ÏõåÌÅ¨ Î°úÍ∑∏"
              description="ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠/ÏùëÎãµ Î°úÍ∑∏ Ï∂úÎ†•"
              value={enableNetworkLogs}
              onValueChange={setNetworkLogs}
            />
            <SettingRow
              icon="üíæ"
              title="Realm Î°úÍ∑∏"
              description="Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏûëÏóÖ Î°úÍ∑∏ Ï∂úÎ†•"
              value={enableRealmLogs}
              onValueChange={setRealmLogs}
            />
            <SettingRow
              icon="‚ö°"
              title="ÏÑ±Îä• Î©îÌä∏Î¶≠"
              description="Î†åÎçîÎßÅ ÏÑ±Îä• Ï†ïÎ≥¥ ÌëúÏãú"
              value={showPerformanceMetrics}
              onValueChange={setPerformanceMetrics}
            />
          </View>
        </View>

        {/* Test Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.test}
            count={[enableMockData, forceGuestMode, skipAnimations, bypassLogin].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üé≠"
              title="Mock Îç∞Ïù¥ÌÑ∞ Í∞ïÏ†ú ÏÇ¨Ïö©"
              description="Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÎåÄÏã† Mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©"
              value={enableMockData}
              onValueChange={setMockData}
            />
            <SettingRow
              icon="üëª"
              title="Í≤åÏä§Ìä∏ Î™®Îìú Í∞ïÏ†ú"
              description="Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóêÏÑúÎèÑ Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú ÌëúÏãú"
              value={forceGuestMode}
              onValueChange={setForceGuestMode}
            />
            <SettingRow
              icon="üèÉ"
              title="Ïï†ÎãàÎ©îÏù¥ÏÖò Í±¥ÎÑàÎõ∞Í∏∞"
              description="Î™®Îì† Ïï†ÎãàÎ©îÏù¥ÏÖò ÎπÑÌôúÏÑ±Ìôî"
              value={skipAnimations}
              onValueChange={setSkipAnimations}
            />
            <SettingRow
              icon="üö™"
              title="Î°úÍ∑∏Ïù∏ Î∞îÏù¥Ìå®Ïä§"
              description="Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏùÑ Í±¥ÎÑàÎõ∞Í≥† Î∞îÎ°ú Ïï± ÏßÑÏûÖ"
              value={bypassLogin}
              onValueChange={setBypassLogin}
            />
          </View>
        </View>

        {/* Feature Flags */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∏∞Îä• ÌîåÎûòÍ∑∏"
            icon={CategoryIcons.feature}
            count={[enableExperimentalFeatures, enableBetaFeatures].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üî¨"
              title="Ïã§ÌóòÏ†Å Í∏∞Îä•"
              description="Í∞úÎ∞ú Ï§ëÏù∏ Ïã§ÌóòÏ†Å Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={enableExperimentalFeatures}
              onValueChange={setExperimentalFeatures}
            />
            <SettingRow
              icon="üéØ"
              title="Î≤†ÌÉÄ Í∏∞Îä•"
              description="Î≤†ÌÉÄ ÌÖåÏä§Ìä∏ Ï§ëÏù∏ Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={enableBetaFeatures}
              onValueChange={setBetaFeatures}
            />
          </View>
        </View>

        {/* Beta Feedback Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="Î≤†ÌÉÄ ÌîºÎìúÎ∞±"
            icon={CategoryIcons.beta}
            count={[enableShakeToFeedback, isBetaUser].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üì≥"
              title="ÌùîÎì§Ïñ¥ÏÑú ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞"
              description="Í∏∞Í∏∞Î•º ÌùîÎì§Ïñ¥ ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              value={enableShakeToFeedback}
              onValueChange={toggleShakeToFeedback}
            />
            <SettingRow
              icon="üßë‚ÄçüöÄ"
              title="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Î™®Îìú"
              description="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Ï†ÑÏö© Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={isBetaUser}
              onValueChange={setBetaStatus}
            />
            <ActionButton
              icon="üí¨"
              title="ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              onPress={showFeedback}
            />
          </View>
        </View>

        {/* Quick Login */}
        <View style={styles.section}>
          <SectionHeader
            title="Îπ†Î•∏ Î°úÍ∑∏Ïù∏"
            icon={CategoryIcons.login}
          />
          <View style={styles.card}>
            <ActionButton
              icon="üßë‚Äçüíª"
              title="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏"
              onPress={() => {
                setTestUser();
                Alert.alert('ÏôÑÎ£å', 'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏ÌñàÏäµÎãàÎã§.');
              }}
              style={styles.successButton}
              textStyle={styles.successButtonText}
            />
            <ActionButton
              icon="üë§"
              title="Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú Ï†ÑÌôò"
              onPress={() => {
                setGuestMode();
                Alert.alert('ÏôÑÎ£å', 'Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú Ï†ÑÌôòÌñàÏäµÎãàÎã§.');
              }}
            />
          </View>
        </View>

        {/* Actions */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∞úÎ∞úÏûê Ïï°ÏÖò"
            icon={CategoryIcons.data}
          />
          <View style={styles.card}>
            <View style={styles.actionGroup}>
              <Text style={styles.actionGroupTitle}>Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±</Text>
              <ActionButton
                icon="‚òï"
                title="ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (14Í∞ú)"
                onPress={handleAddTestData}
                style={styles.dataButton}
              />
              <ActionButton
                icon="üß™"
                title="Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ (1Í∞ú)"
                onPress={handleAddSimpleTest}
                style={styles.dataButton}
              />
              <ActionButton
                icon="‚ö°"
                title="Îπ†Î•∏ ÌÖåÏä§Ìä∏ (5Í∞ú)"
                onPress={handleAddQuickTest}
                style={styles.dataButton}
              />
              <ActionButton
                icon="üß™"
                title="Îç∞Ïù¥ÌÑ∞ ÌÖåÏä§Ìä∏ ÌôîÎ©¥"
                onPress={() => navigation.navigate('DataTest')}
                style={styles.actionButton}
              />
            </View>
            
            <View style={styles.actionGroup}>
              <Text style={styles.actionGroupTitle}>Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÎèÑÍµ¨</Text>
              <ActionButton
                icon="üì∏"
                title="Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∞ÄÏù¥Îìú"
                onPress={handleScreenshotGuide}
                style={styles.actionButton}
              />
              <ActionButton
                icon="üñºÔ∏è"
                title="Ï†ÄÏû•Îêú Ïä§ÌÅ¨Î¶∞ÏÉ∑ Î≥¥Í∏∞"
                onPress={handleViewScreenshots}
                style={styles.actionButton}
              />
              <ActionButton
                icon="üóëÔ∏è"
                title="Ïä§ÌÅ¨Î¶∞ÏÉ∑ Î™®Îëê ÏÇ≠Ï†ú"
                onPress={handleClearScreenshots}
                style={styles.warningButton}
              />
            </View>
            
            <View style={[styles.actionGroup, styles.dangerZone]}>
              <Text style={[styles.actionGroupTitle, styles.dangerTitle]}>ÏúÑÌóò Íµ¨Ïó≠</Text>
              <ActionButton
                icon="üóëÔ∏è"
                title="Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú"
                onPress={handleClearRealmData}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                icon="üí£"
                title="Ï†ÑÏ≤¥ Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú"
                onPress={handleClearStorage}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                icon="üîÑ"
                title="Î™®Îì† ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî"
                onPress={resetAllSettings}
                style={styles.warningButton}
                textStyle={styles.warningButtonText}
              />
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  navigationBar: {
    height: 44,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: HIGConstants.SPACING_LG,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
  },
  backButton: {
    paddingVertical: HIGConstants.SPACING_SM,
  },
  backButtonText: {
    fontSize: 17,
    color: HIGColors.blue,
    fontWeight: '400',
  },
  navigationTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  disableButtonText: {
    fontSize: 15,
    color: HIGColors.red,
    fontWeight: '500',
  },
  scrollView: {
    flex: 1,
  },
  disabledContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_XL,
  },
  disabledIcon: {
    fontSize: 64,
    marginBottom: HIGConstants.SPACING_LG,
  },
  disabledTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: HIGConstants.SPACING_SM,
    textAlign: 'center',
  },
  disabledDescription: {
    fontSize: 16,
    color: HIGColors.secondaryLabel,
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: HIGConstants.SPACING_XL,
  },
  enableButton: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
  },
  enableButtonText: {
    color: HIGColors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  warningCard: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    padding: HIGConstants.SPACING_MD,
    margin: HIGConstants.SPACING_LG,
    borderWidth: 1,
    borderColor: HIGColors.orange,
    flexDirection: 'row',
    alignItems: 'center',
  },
  warningIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  warningText: {
    flex: 1,
    fontSize: 14,
    color: HIGColors.label,
    lineHeight: 20,
  },
  section: {
    marginBottom: HIGConstants.SPACING_LG,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
  },
  sectionHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  sectionTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  badge: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 2,
    borderRadius: 10,
    marginLeft: HIGConstants.SPACING_SM,
  },
  badgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  card: {
    backgroundColor: '#F8F9FA',
    marginHorizontal: HIGConstants.SPACING_LG,
    borderRadius: HIGConstants.BORDER_RADIUS,
    borderWidth: 1,
    borderColor: HIGColors.gray4,
    overflow: 'hidden',
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
    minHeight: 60,
  },
  settingIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingInfo: {
    flex: 1,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: HIGColors.label,
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 13,
    color: HIGColors.secondaryLabel,
    lineHeight: 16,
  },
  actionButton: {
    backgroundColor: HIGColors.blue,
    padding: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
    margin: HIGConstants.SPACING_SM,
  },
  actionButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  actionButtonIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_XS,
  },
  actionButtonText: {
    color: HIGColors.white,
    fontSize: 15,
    fontWeight: '600',
  },
  dangerButton: {
    backgroundColor: HIGColors.red,
  },
  dangerButtonText: {
    color: HIGColors.white,
  },
  warningButton: {
    backgroundColor: HIGColors.orange,
  },
  warningButtonText: {
    color: HIGColors.white,
  },
  successButton: {
    backgroundColor: HIGColors.green,
  },
  successButtonText: {
    color: HIGColors.white,
  },
  dataButton: {
    backgroundColor: HIGColors.green,
  },
  userInfoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
  },
  userAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: HIGColors.blue,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: HIGConstants.SPACING_MD,
  },
  userAvatarText: {
    fontSize: 24,
    fontWeight: '600',
    color: HIGColors.white,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    fontSize: 18,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
  },
  userBadges: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  userBadge: {
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 4,
    borderRadius: HIGConstants.BORDER_RADIUS_SM,
    marginRight: HIGConstants.SPACING_XS,
  },
  userBadgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  actionGroup: {
    padding: HIGConstants.SPACING_MD,
  },
  actionGroupTitle: {
    fontSize: 13,
    fontWeight: '600',
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
    textTransform: 'uppercase',
  },
  dangerZone: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    marginTop: HIGConstants.SPACING_SM,
  },
  dangerTitle: {
    color: HIGColors.red,
  },
});

export default DeveloperScreen;