import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Switch,
  Alert,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { HIGConstants, HIGColors } from '../styles/common';
import { useDevStore } from '../stores/useDevStore';
import { useUserStore } from '../stores/useUserStore';
import { useFeedbackStore } from '../stores/useFeedbackStore';
import RealmService from '../services/realm/RealmService';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Category Icons
const CategoryIcons = {
  user: 'üë§',
  debug: 'üêõ',
  test: 'üß™',
  feature: '‚ö°',
  beta: 'üöÄ',
  login: 'üîë',
  data: 'üíæ',
};

const DeveloperScreen = () => {
  const navigation = useNavigation();
  
  const { currentUser, setTestUser, setGuestMode } = useUserStore();
  const { showFeedback, enableShakeToFeedback, toggleShakeToFeedback, isBetaUser, setBetaStatus } = useFeedbackStore();
  const {
    isDeveloperMode,
    showDebugInfo,
    enableNetworkLogs,
    enableRealmLogs,
    showPerformanceMetrics,
    enableMockData,
    forceGuestMode,
    skipAnimations,
    bypassLogin,
    enableExperimentalFeatures,
    enableBetaFeatures,
    toggleDeveloperMode,
    setDebugInfo,
    setNetworkLogs,
    setRealmLogs,
    setPerformanceMetrics,
    setMockData,
    setForceGuestMode,
    setSkipAnimations,
    setBypassLogin,
    setExperimentalFeatures,
    setBetaFeatures,
    resetAllSettings,
  } = useDevStore();

  const handleClearStorage = () => {
    Alert.alert(
      'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú',
      'Î™®Îì† Ïï± Îç∞Ïù¥ÌÑ∞(ÏÑ§Ï†ï, Ï∫êÏãú Îì±)Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏï±Ïù¥ Ïû¨ÏãúÏûëÎê©ÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.clear();
              Alert.alert('ÏôÑÎ£å', 'Ï†ÄÏû•ÏÜåÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§. Ïï±ÏùÑ Ïû¨ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.');
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleClearRealmData = () => {
    Alert.alert(
      'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
      'Î™®Îì† ÌÖåÏù¥Ïä§ÌåÖ Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              if (realmService.isInitialized) {
                const realm = realmService.getRealm();
                realm.write(() => {
                  realm.deleteAll();
                });
                Alert.alert('ÏôÑÎ£å', 'Realm Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
              }
            } catch (error) {
              Alert.alert('Ïò§Î•ò', 'Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
          },
        },
      ]
    );
  };

  const handleAddTestData = () => {
    Alert.alert(
      'ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä',
      'ÏÉòÌîå ÌÖåÏù¥Ïä§ÌåÖ Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ï∂îÍ∞Ä',
          onPress: async () => {
            try {
              const realmService = RealmService.getInstance();
              
              // RealmÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Ï¥àÍ∏∞Ìôî
              if (!realmService.isInitialized) {
                await realmService.initialize();
              }
              
              const testTastings = [
                {
                  coffeeInfo: {
                    cafeName: 'Blue Bottle Coffee ÏÇºÏ≤≠Ï†ê',
                    roastery: 'Blue Bottle Coffee',
                    coffeeName: 'Three Africas',
                    origin: 'Ethiopia / Yirgacheffe',
                    variety: 'Heirloom',
                    process: 'Washed',
                    altitude: '1,800-2,000m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bright and clean with floral notes, hints of lemon and bergamot.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Citrus Fruit', koreanValue: 'Í∞êÍ∑§Î•ò' },
                    { level: 3, value: 'Lemon', koreanValue: 'Î†àÎ™¨' },
                    { level: 2, value: 'Floral', koreanValue: 'ÍΩÉÌñ•Í∏∞' },
                    { level: 3, value: 'Jasmine', koreanValue: 'ÏûêÏä§ÎØº' }
                  ],
                  sensoryAttributes: {
                    body: 3,
                    acidity: 4,
                    sweetness: 3,
                    finish: 4,
                    mouthfeel: 'Clean' as const
                  },
                  matchScore: { total: 89, flavorScore: 43, sensoryScore: 46 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Fritz Coffee Company ÏÑ±ÏàòÏ†ê',
                    roastery: 'Fritz Coffee Company',
                    coffeeName: 'Colombia Geisha',
                    origin: 'Colombia / Huila',
                    variety: 'Geisha',
                    process: 'Honey',
                    altitude: '1,600-1,800m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Complex and elegant with tropical fruit notes and wine-like acidity.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Other Fruit', koreanValue: 'Í∏∞ÌÉÄ Í≥ºÏùº' },
                    { level: 3, value: 'Mango', koreanValue: 'ÎßùÍ≥†' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Honey', koreanValue: 'ÍøÄ' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 5,
                    sweetness: 4,
                    finish: 5,
                    mouthfeel: 'Juicy' as const
                  },
                  matchScore: { total: 92, flavorScore: 47, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Anthracite Coffee ÌïúÎÇ®Ï†ê',
                    roastery: 'Anthracite Coffee',
                    coffeeName: 'Single Origin Blend',
                    origin: 'Brazil / Santos',
                    variety: 'Catuai',
                    process: 'Natural',
                    altitude: '1,200-1,400m',
                    temperature: 'ice' as const
                  },
                  roasterNotes: 'Rich chocolate notes with nutty undertones and caramel sweetness.',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Dark Chocolate', koreanValue: 'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Hazelnut', koreanValue: 'Ìó§Ïù¥Ï¶êÎÑõ' },
                    { level: 1, value: 'Sweet', koreanValue: 'Îã®Îßõ' },
                    { level: 2, value: 'Caramel', koreanValue: 'Ïπ¥ÎùºÎ©ú' }
                  ],
                  sensoryAttributes: {
                    body: 5,
                    acidity: 2,
                    sweetness: 4,
                    finish: 3,
                    mouthfeel: 'Creamy' as const
                  },
                  matchScore: { total: 85, flavorScore: 40, sensoryScore: 45 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Cafe Onion ÏÑ±ÏàòÏ†ê',
                    roastery: 'Onion Coffee',
                    coffeeName: 'Kenya AA',
                    origin: 'Kenya / Nyeri',
                    variety: 'SL28, SL34',
                    process: 'Washed',
                    altitude: '1,500-1,700m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Bold and bright with blackcurrant notes and wine-like complexity.',
                  selectedFlavors: [
                    { level: 1, value: 'Fruity', koreanValue: 'Í≥ºÏùºÌñ•' },
                    { level: 2, value: 'Berry', koreanValue: 'Î≤†Î¶¨' },
                    { level: 3, value: 'Blackcurrant', koreanValue: 'Î∏îÎûôÏª§Îü∞Ìä∏' },
                    { level: 1, value: 'Sour/Fermented', koreanValue: 'Ïã†Îßõ/Î∞úÌö®' },
                    { level: 2, value: 'Wine', koreanValue: 'ÏôÄÏù∏' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 5,
                    sweetness: 2,
                    finish: 4,
                    mouthfeel: 'Clean' as const
                  },
                  matchScore: { total: 87, flavorScore: 44, sensoryScore: 43 }
                },
                {
                  coffeeInfo: {
                    cafeName: 'Terarosa Coffee Í∞ïÎÇ®Ï†ê',
                    roastery: 'Terarosa Coffee',
                    coffeeName: 'Guatemala Antigua',
                    origin: 'Guatemala / Antigua',
                    variety: 'Bourbon, Typica',
                    process: 'Washed',
                    altitude: '1,500-1,900m',
                    temperature: 'hot' as const
                  },
                  roasterNotes: 'Full-bodied with chocolate and spice notes, smooth and balanced.',
                  selectedFlavors: [
                    { level: 1, value: 'Chocolate', koreanValue: 'Ï¥àÏΩúÎ¶ø' },
                    { level: 2, value: 'Milk Chocolate', koreanValue: 'Î∞ÄÌÅ¨ Ï¥àÏΩúÎ¶ø' },
                    { level: 1, value: 'Spices', koreanValue: 'Ìñ•Ïã†Î£å' },
                    { level: 2, value: 'Cinnamon', koreanValue: 'Í≥ÑÌîº' },
                    { level: 1, value: 'Nutty/Cocoa', koreanValue: 'Í≤¨Í≥ºÎ•ò/ÏΩîÏΩîÏïÑ' },
                    { level: 2, value: 'Almond', koreanValue: 'ÏïÑÎ™¨Îìú' }
                  ],
                  sensoryAttributes: {
                    body: 4,
                    acidity: 3,
                    sweetness: 4,
                    finish: 4,
                    mouthfeel: 'Silky' as const
                  },
                  matchScore: { total: 86, flavorScore: 41, sensoryScore: 45 }
                }
              ];

              for (const testTasting of testTastings) {
                await realmService.saveTasting(testTasting);
              }
              Alert.alert('ÏôÑÎ£å', `${testTastings.length}Í∞úÏùò ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.`);
            } catch (error) {
              console.error('ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ïò§Î•ò:', error);
              const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
              Alert.alert('Ïò§Î•ò', `ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:\n${errorMessage}`);
            }
          },
        },
      ]
    );
  };

  const SettingRow = ({ 
    title, 
    description, 
    value, 
    onValueChange, 
    icon,
  }: {
    title: string;
    description?: string;
    value?: boolean;
    onValueChange?: (value: boolean) => void;
    icon?: string;
  }) => (
    <View style={styles.settingRow}>
      {icon && (
        <Text style={styles.settingIcon}>{icon}</Text>
      )}
      <View style={styles.settingInfo}>
        <Text style={styles.settingTitle}>{title}</Text>
        {description && (
          <Text style={styles.settingDescription}>{description}</Text>
        )}
      </View>
      <Switch
        value={value}
        onValueChange={onValueChange}
        trackColor={{ false: HIGColors.gray3, true: HIGColors.blue }}
        thumbColor={value ? HIGColors.white : HIGColors.gray}
      />
    </View>
  );

  const ActionButton = ({ title, onPress, style, textStyle, icon }: {
    title: string;
    onPress: () => void;
    style?: any;
    textStyle?: any;
    icon?: string;
  }) => (
    <TouchableOpacity 
      style={[styles.actionButton, style]} 
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.actionButtonContent}>
        {icon && <Text style={styles.actionButtonIcon}>{icon}</Text>}
        <Text style={[styles.actionButtonText, textStyle]}>{title}</Text>
      </View>
    </TouchableOpacity>
  );

  // Section Header Component
  const SectionHeader = ({ 
    title, 
    icon, 
    count,
  }: {
    title: string;
    icon: string;
    count?: number;
  }) => (
    <View style={styles.sectionHeader}>
      <View style={styles.sectionHeaderLeft}>
        <Text style={styles.sectionIcon}>{icon}</Text>
        <Text style={styles.sectionTitle}>{title}</Text>
        {count !== undefined && count > 0 && (
          <View style={styles.badge}>
            <Text style={styles.badgeText}>{count}</Text>
          </View>
        )}
      </View>
    </View>
  );

  if (!isDeveloperMode) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.navigationBar}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
          </TouchableOpacity>
          <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
          <View style={{ width: 30 }} />
        </View>

        <View style={styles.disabledContainer}>
          <Text style={styles.disabledIcon}>üö´</Text>
          <Text style={styles.disabledTitle}>Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎê®</Text>
          <Text style={styles.disabledDescription}>
            Í∞úÎ∞úÏûê Î™®ÎìúÎ•º ÌôúÏÑ±ÌôîÌïòÎ†§Î©¥ ÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.{'\n'}
            Ïù¥ Î™®ÎìúÎäî ÎîîÎ≤ÑÍπÖÍ≥º ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Í≥†Í∏â ÏÑ§Ï†ïÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
          </Text>
          <TouchableOpacity
            style={styles.enableButton}
            onPress={toggleDeveloperMode}
          >
            <Text style={styles.enableButtonText}>Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.navigationBar}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>‚Äπ Îí§Î°ú</Text>
        </TouchableOpacity>
        <Text style={styles.navigationTitle}>Í∞úÎ∞úÏûê Î™®Îìú</Text>
        <TouchableOpacity onPress={toggleDeveloperMode}>
          <Text style={styles.disableButtonText}>ÎπÑÌôúÏÑ±Ìôî</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Warning */}
        <View style={styles.warningCard}>
          <Text style={styles.warningIcon}>‚ö†Ô∏è</Text>
          <Text style={styles.warningText}>
            Í∞úÎ∞úÏûê Î™®ÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.{'\n'}
            Ïù¥ ÏÑ§Ï†ïÎì§ÏùÄ Ïï±Ïùò ÎèôÏûëÏóê ÏòÅÌñ•ÏùÑ Ï§Ñ Ïàò ÏûàÏäµÎãàÎã§.
          </Text>
        </View>

        {/* User Info */}
        <View style={styles.section}>
          <SectionHeader
            title="ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥"
            icon={CategoryIcons.user}
          />
          <View style={styles.card}>
            <View style={styles.userInfoCard}>
              <View style={styles.userAvatar}>
                <Text style={styles.userAvatarText}>
                  {currentUser?.username?.charAt(0).toUpperCase() || 'G'}
                </Text>
              </View>
              <View style={styles.userDetails}>
                <Text style={styles.userName}>
                  {currentUser?.username || 'Guest User'}
                </Text>
                <Text style={styles.userEmail}>
                  {currentUser?.email || 'guest@coffejournal.app'}
                </Text>
                <View style={styles.userBadges}>
                  <View style={[styles.userBadge, { backgroundColor: currentUser?.username === 'Guest' ? '#FFC107' : '#4CAF50' }]}>
                    <Text style={styles.userBadgeText}>
                      {currentUser?.username === 'Guest' ? 'Í≤åÏä§Ìä∏' : 'Î°úÍ∑∏Ïù∏'}
                    </Text>
                  </View>
                  {currentUser?.email === 'hello@zimojin.com' && (
                    <View style={[styles.userBadge, { backgroundColor: '#6B46C1' }]}>
                      <Text style={styles.userBadgeText}>Í¥ÄÎ¶¨Ïûê</Text>
                    </View>
                  )}
                </View>
              </View>
            </View>
          </View>
        </View>

        {/* Debug Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÎîîÎ≤ÑÍ∑∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.debug}
            count={[showDebugInfo, enableNetworkLogs, enableRealmLogs, showPerformanceMetrics].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üìä"
              title="ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú"
              description="ÌôîÎ©¥Ïóê ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ ÌëúÏãú"
              value={showDebugInfo}
              onValueChange={setDebugInfo}
            />
            <SettingRow
              icon="üåê"
              title="ÎÑ§Ìä∏ÏõåÌÅ¨ Î°úÍ∑∏"
              description="ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠/ÏùëÎãµ Î°úÍ∑∏ Ï∂úÎ†•"
              value={enableNetworkLogs}
              onValueChange={setNetworkLogs}
            />
            <SettingRow
              icon="üíæ"
              title="Realm Î°úÍ∑∏"
              description="Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏûëÏóÖ Î°úÍ∑∏ Ï∂úÎ†•"
              value={enableRealmLogs}
              onValueChange={setRealmLogs}
            />
            <SettingRow
              icon="‚ö°"
              title="ÏÑ±Îä• Î©îÌä∏Î¶≠"
              description="Î†åÎçîÎßÅ ÏÑ±Îä• Ï†ïÎ≥¥ ÌëúÏãú"
              value={showPerformanceMetrics}
              onValueChange={setPerformanceMetrics}
            />
          </View>
        </View>

        {/* Test Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï"
            icon={CategoryIcons.test}
            count={[enableMockData, forceGuestMode, skipAnimations, bypassLogin].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üé≠"
              title="Mock Îç∞Ïù¥ÌÑ∞ Í∞ïÏ†ú ÏÇ¨Ïö©"
              description="Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÎåÄÏã† Mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©"
              value={enableMockData}
              onValueChange={setMockData}
            />
            <SettingRow
              icon="üëª"
              title="Í≤åÏä§Ìä∏ Î™®Îìú Í∞ïÏ†ú"
              description="Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóêÏÑúÎèÑ Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú ÌëúÏãú"
              value={forceGuestMode}
              onValueChange={setForceGuestMode}
            />
            <SettingRow
              icon="üèÉ"
              title="Ïï†ÎãàÎ©îÏù¥ÏÖò Í±¥ÎÑàÎõ∞Í∏∞"
              description="Î™®Îì† Ïï†ÎãàÎ©îÏù¥ÏÖò ÎπÑÌôúÏÑ±Ìôî"
              value={skipAnimations}
              onValueChange={setSkipAnimations}
            />
            <SettingRow
              icon="üö™"
              title="Î°úÍ∑∏Ïù∏ Î∞îÏù¥Ìå®Ïä§"
              description="Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏùÑ Í±¥ÎÑàÎõ∞Í≥† Î∞îÎ°ú Ïï± ÏßÑÏûÖ"
              value={bypassLogin}
              onValueChange={setBypassLogin}
            />
          </View>
        </View>

        {/* Feature Flags */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∏∞Îä• ÌîåÎûòÍ∑∏"
            icon={CategoryIcons.feature}
            count={[enableExperimentalFeatures, enableBetaFeatures].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üî¨"
              title="Ïã§ÌóòÏ†Å Í∏∞Îä•"
              description="Í∞úÎ∞ú Ï§ëÏù∏ Ïã§ÌóòÏ†Å Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={enableExperimentalFeatures}
              onValueChange={setExperimentalFeatures}
            />
            <SettingRow
              icon="üéØ"
              title="Î≤†ÌÉÄ Í∏∞Îä•"
              description="Î≤†ÌÉÄ ÌÖåÏä§Ìä∏ Ï§ëÏù∏ Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={enableBetaFeatures}
              onValueChange={setBetaFeatures}
            />
          </View>
        </View>

        {/* Beta Feedback Settings */}
        <View style={styles.section}>
          <SectionHeader
            title="Î≤†ÌÉÄ ÌîºÎìúÎ∞±"
            icon={CategoryIcons.beta}
            count={[enableShakeToFeedback, isBetaUser].filter(Boolean).length}
          />
          <View style={styles.card}>
            <SettingRow
              icon="üì≥"
              title="ÌùîÎì§Ïñ¥ÏÑú ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞"
              description="Í∏∞Í∏∞Î•º ÌùîÎì§Ïñ¥ ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              value={enableShakeToFeedback}
              onValueChange={toggleShakeToFeedback}
            />
            <SettingRow
              icon="üßë‚ÄçüöÄ"
              title="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Î™®Îìú"
              description="Î≤†ÌÉÄ ÌÖåÏä§ÌÑ∞ Ï†ÑÏö© Í∏∞Îä• ÌôúÏÑ±Ìôî"
              value={isBetaUser}
              onValueChange={setBetaStatus}
            />
            <ActionButton
              icon="üí¨"
              title="ÌîºÎìúÎ∞± Î™®Îã¨ Ïó¥Í∏∞"
              onPress={showFeedback}
            />
          </View>
        </View>

        {/* Quick Login */}
        <View style={styles.section}>
          <SectionHeader
            title="Îπ†Î•∏ Î°úÍ∑∏Ïù∏"
            icon={CategoryIcons.login}
          />
          <View style={styles.card}>
            <ActionButton
              icon="üßë‚Äçüíª"
              title="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏"
              onPress={() => {
                setTestUser();
                Alert.alert('ÏôÑÎ£å', 'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Î°úÍ∑∏Ïù∏ÌñàÏäµÎãàÎã§.');
              }}
              style={styles.successButton}
              textStyle={styles.successButtonText}
            />
            <ActionButton
              icon="üë§"
              title="Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú Ï†ÑÌôò"
              onPress={() => {
                setGuestMode();
                Alert.alert('ÏôÑÎ£å', 'Í≤åÏä§Ìä∏ Î™®ÎìúÎ°ú Ï†ÑÌôòÌñàÏäµÎãàÎã§.');
              }}
            />
          </View>
        </View>

        {/* Actions */}
        <View style={styles.section}>
          <SectionHeader
            title="Í∞úÎ∞úÏûê Ïï°ÏÖò"
            icon={CategoryIcons.data}
          />
          <View style={styles.card}>
            <View style={styles.actionGroup}>
              <Text style={styles.actionGroupTitle}>Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±</Text>
              <ActionButton
                icon="‚òï"
                title="ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (5Í∞ú)"
                onPress={handleAddTestData}
                style={styles.dataButton}
              />
            </View>
            
            <View style={[styles.actionGroup, styles.dangerZone]}>
              <Text style={[styles.actionGroupTitle, styles.dangerTitle]}>ÏúÑÌóò Íµ¨Ïó≠</Text>
              <ActionButton
                icon="üóëÔ∏è"
                title="Realm Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú"
                onPress={handleClearRealmData}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                icon="üí£"
                title="Ï†ÑÏ≤¥ Ï†ÄÏû•ÏÜå ÏÇ≠Ï†ú"
                onPress={handleClearStorage}
                style={styles.dangerButton}
                textStyle={styles.dangerButtonText}
              />
              <ActionButton
                icon="üîÑ"
                title="Î™®Îì† ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî"
                onPress={resetAllSettings}
                style={styles.warningButton}
                textStyle={styles.warningButtonText}
              />
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  navigationBar: {
    height: 44,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: HIGConstants.SPACING_LG,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
  },
  backButton: {
    paddingVertical: HIGConstants.SPACING_SM,
  },
  backButtonText: {
    fontSize: 17,
    color: HIGColors.blue,
    fontWeight: '400',
  },
  navigationTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  disableButtonText: {
    fontSize: 15,
    color: HIGColors.red,
    fontWeight: '500',
  },
  scrollView: {
    flex: 1,
  },
  disabledContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_XL,
  },
  disabledIcon: {
    fontSize: 64,
    marginBottom: HIGConstants.SPACING_LG,
  },
  disabledTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: HIGConstants.SPACING_SM,
    textAlign: 'center',
  },
  disabledDescription: {
    fontSize: 16,
    color: HIGColors.secondaryLabel,
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: HIGConstants.SPACING_XL,
  },
  enableButton: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
  },
  enableButtonText: {
    color: HIGColors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  warningCard: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    padding: HIGConstants.SPACING_MD,
    margin: HIGConstants.SPACING_LG,
    borderWidth: 1,
    borderColor: HIGColors.orange,
    flexDirection: 'row',
    alignItems: 'center',
  },
  warningIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  warningText: {
    flex: 1,
    fontSize: 14,
    color: HIGColors.label,
    lineHeight: 20,
  },
  section: {
    marginBottom: HIGConstants.SPACING_LG,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: HIGConstants.SPACING_LG,
    paddingVertical: HIGConstants.SPACING_MD,
  },
  sectionHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: HIGConstants.SPACING_SM,
  },
  sectionTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: HIGColors.label,
  },
  badge: {
    backgroundColor: HIGColors.blue,
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 2,
    borderRadius: 10,
    marginLeft: HIGConstants.SPACING_SM,
  },
  badgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  card: {
    backgroundColor: '#F8F9FA',
    marginHorizontal: HIGConstants.SPACING_LG,
    borderRadius: HIGConstants.BORDER_RADIUS,
    borderWidth: 1,
    borderColor: HIGColors.gray4,
    overflow: 'hidden',
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
    borderBottomWidth: 0.5,
    borderBottomColor: HIGColors.gray4,
    minHeight: 60,
  },
  settingIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingInfo: {
    flex: 1,
    marginRight: HIGConstants.SPACING_SM,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: HIGColors.label,
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 13,
    color: HIGColors.secondaryLabel,
    lineHeight: 16,
  },
  actionButton: {
    backgroundColor: HIGColors.blue,
    padding: HIGConstants.SPACING_MD,
    borderRadius: HIGConstants.BORDER_RADIUS,
    margin: HIGConstants.SPACING_SM,
  },
  actionButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  actionButtonIcon: {
    fontSize: 20,
    marginRight: HIGConstants.SPACING_XS,
  },
  actionButtonText: {
    color: HIGColors.white,
    fontSize: 15,
    fontWeight: '600',
  },
  dangerButton: {
    backgroundColor: HIGColors.red,
  },
  dangerButtonText: {
    color: HIGColors.white,
  },
  warningButton: {
    backgroundColor: HIGColors.orange,
  },
  warningButtonText: {
    color: HIGColors.white,
  },
  successButton: {
    backgroundColor: HIGColors.green,
  },
  successButtonText: {
    color: HIGColors.white,
  },
  dataButton: {
    backgroundColor: HIGColors.green,
  },
  userInfoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: HIGConstants.SPACING_MD,
  },
  userAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: HIGColors.blue,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: HIGConstants.SPACING_MD,
  },
  userAvatarText: {
    fontSize: 24,
    fontWeight: '600',
    color: HIGColors.white,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    fontSize: 18,
    fontWeight: '600',
    color: HIGColors.label,
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
  },
  userBadges: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  userBadge: {
    paddingHorizontal: HIGConstants.SPACING_SM,
    paddingVertical: 4,
    borderRadius: HIGConstants.BORDER_RADIUS_SM,
    marginRight: HIGConstants.SPACING_XS,
  },
  userBadgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: HIGColors.white,
  },
  actionGroup: {
    padding: HIGConstants.SPACING_MD,
  },
  actionGroupTitle: {
    fontSize: 13,
    fontWeight: '600',
    color: HIGColors.secondaryLabel,
    marginBottom: HIGConstants.SPACING_SM,
    textTransform: 'uppercase',
  },
  dangerZone: {
    backgroundColor: '#FFF3E0',
    borderRadius: HIGConstants.BORDER_RADIUS,
    marginTop: HIGConstants.SPACING_SM,
  },
  dangerTitle: {
    color: HIGColors.red,
  },
});

export default DeveloperScreen;